//Мои ----------------------------------------------------------------------------
&НаСервере
Перем ТабМагнум,ТабМетро;
//Перем ПоискЗначенияСвойствОбъектов,ЗначенияСвойствОбъектовОбъект;
&НаСервере
Перем Дерево;
&НаСервере
Перем дзXML;
&НаСервере
Перем СсылкаНоменклатура,ЗначениеНоменклатурыПодсистема_BUYER_ART_NO,ЗначениеНоменклатурыШтрихКод_GTIN,ЗначениеНоменклатурыКод;
&НаСервере
Перем СсылкаКонтрагента,ЗначениеКонтрагент_BUYER_GLN;
&НаСервере
Перем СсылкаОрганизация,ЗначениеОрганизация_SUPPLIER_GLN;
&НаСервере
Перем СсылкаВалюта,ЗначениеВалюта_CURRENCY;
&НаСервере
Перем НовыйДокумент;
&НаСервере
Перем СтатусПроверкиДокументаНаСоздание,ПоискГодЗаявки,ПоискНомераЗаявкиПокупателя;
&НаСервере
Перем НайденныеФайлы, Каталог, Маска, СписокЗагружаемыхФайловXML;
&НаСервере
Перем Загрузка_ИмяФайла, Загрузка_ПутьФайлаДляЗагрузки;
&НаСервере
Перем ТаблицаЗаявкаФайл;
//Мои ****************************************************************************

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	КонецЕсли;
	
	// Активизировать табличную часть
	УстановитьТекущуюСтраницуОсновнойПанели();
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// РедактированиеДокументовПользователей
	ПраваДоступаКОбъектам.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец РедактированиеДокументовПользователей
	
	ПодготовитьФормуНаСервере();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьСубконто();
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз И Объект.Товары.Количество() > 0);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		УчетНДСИАкциза.ЗаполнитьДокументОснованиеВСчетеФактуре(Объект, Объект.ДокументОснование, "СчетФактураВыданный");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) И ЗначениеЗаполнено(ДанныеСчетаФактуры) Тогда
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
		УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
		УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбработанаТабличнаяЧасть" И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметр);

	ИначеЕсли ИмяСобытия = "Запись_СчетФактураВыданный"
		И (Параметр.ДокументыОснования.Найти(Объект.Ссылка) <> Неопределено ИЛИ Источник = СчетФактура) Тогда
			
		Если Параметр.ДокументыОснования.Найти(Объект.Ссылка) = Неопределено Тогда
			// в счете-фактуре документ был удален из списка документов-оснований
			СчетФактура = ПредопределенноеЗначение("Документ.СчетФактураВыданный.ПустаяСсылка");	
		КонецЕсли;
		
		ОбработкаОповещенияЗаписиСчетаФактурыНаСервере();
		
	ИначеЕсли ИмяСобытия = "ДанныеСкопированыВБуферОбмена" Тогда				
		УстановитьДоступностьКомандыВставки(ЭтотОбъект, Истина);        
		
	Иначе			
		ОбщегоНазначенияБККлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);		 
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаВыбора" Тогда
		
		ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетНаОплатуПокупателю.Форма.ФормаВыбора" Тогда
		
		ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда		
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы = "Справочник.НомераГТД.Форма.ФормаРедактированияНомеровГТД" Тогда
		
		ЗаполнитьТабличнуюЧастьНомераГТД(ВыбранноеЗначение); 	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РеализацияТоваровУслуг", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = ТекущийВидОперации;
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ТекущийВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоказыватьВДокументахСчетаУчета И (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0) Тогда 
		ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовОбработатьИзменениеВидаОперации");
	Иначе 
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПерезаполнитьСчетаУчета", Истина);
		ВидОперацииПриИзмененииНаСервере(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБККлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		
		СтруктураРезультатаВыполненияПриИзмененииДаты = Неопределено;
		ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты);
		
		Если СтруктураРезультатаВыполненияПриИзмененииДаты <> Неопределено Тогда 
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПоИзменениюДаты", ЭтотОбъект, СтруктураРезультатаВыполненияПриИзмененииДаты);
			ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполненияПриИзмененииДаты.ТекстВопроса, Режим, 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУПриИзменении(Элемент)

	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидУчетаНУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияБККлиент.НачалоВыбораЗначенияВидУчетаНУ(Элемент, Объект.ВидУчетаНУ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныИВалютаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	//РаботаСДиалогамиКлиент.СтруктурноеПодразделениеНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, Объект.Организация, Объект.СтруктурноеПодразделение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтруктурноеПодразделениеОрганизация) Тогда 
		Объект.Организация = Неопределено;
		Объект.СтруктурноеПодразделение = Неопределено;
	Иначе 
		//Результат = РаботаСДиалогамиКлиент.ПроверитьИзменениеЗначенийОрганизацииСтруктурногоПодразделения(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение);
		//Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
		//	Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда 
		//		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
		//	Иначе 
		//		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьКПНПриИзменении(Элемент)

	УчитыватьКПНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, ТипыДокументов",
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента, Объект.Дата, "Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Сделка.Тип");

	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовСКонтрагентом;
	Иначе
		СчетДляОпределенияОстатков = Объект.СчетУчетаРасчетовПоАвансам;
	КонецЕсли; 
	
	СтруктураПараметров.Вставить("СчетУчета"     , СчетДляОпределенияОстатков);
	СтруктураПараметров.Вставить("ОстаткиОбороты", "Кт");
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", СтруктураПараметров);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураРезультатаВыполнения = Неопределено;

	КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)

	Если ТекущийДокументОснование = Объект.ДокументОснование Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru='Заполнить текущий документ данными документа-основания?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаПриИзмененииДокументОснование", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	КонецЕсли;
	ТекущийДокументОснование = Объект.ДокументОснование;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//УчетНДСиАкцизаКлиент.ОткрытьСчетФактуру(ЭтаФорма, СчетФактура, "СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереченьДокументацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура("ФормаВладелец,ИмяРеквизита", ЭтаФорма, "ПереченьДокументации");

    Оповещение = Новый ОписаниеОповещения("ПереченьДокументацииЗавершениеВвода", ЭтотОбъект, ДополнительныеПараметры);
   
    ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
             Оповещение,                                                   
			 Объект.ПереченьДокументации,
             НСтр("ru='Перечень документации'"));
			 
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	 
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект.Товары);	
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		ТекущиеДанные.Коэффициент = 1;
		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, НДСВидОперацииРеализации, СтавкаАкциза, СуммаАкциза, АкцизВидОперацииРеализации");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Товары", ПараметрыОбъекта);		
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Товары.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	НомераГТДКлиентСервер.УдалитьСтрокиТаблицыНомераГТД(Элементы.Товары.ТекущиеДанные.КлючСвязи, Объект.НомераГТД);
		
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество, Цена, Сумма, 
		|СтавкаНДС, СуммаНДС, СчетУчетаНДСПоРеализации, НДСВидОперацииРеализации, СчетУчетаБУ, СчетУчетаНУ,
		|СтавкаАкциза, СуммаАкциза, АкцизВидОперацииРеализации, СчетУчетаАкцизаПоРеализации, КоэффициентАкциза,
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3, 
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3,
		|ВидСубконтоДоходовНУ1, ВидСубконтоДоходовНУ2, ВидСубконтоДоходовНУ3,
		|СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность,
		|СубконтоДоходовНУ1Доступность, СубконтоДоходовНУ2Доступность, СубконтоДоходовНУ3Доступность,
		|СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3,
		|СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3, 
		|ВидСубконтоСписанияСебестоимостиБУ1, ВидСубконтоСписанияСебестоимостиБУ2, ВидСубконтоСписанияСебестоимостиБУ3,
		|ВидСубконтоСписанияСебестоимостиНУ1, ВидСубконтоСписанияСебестоимостиНУ2, ВидСубконтоСписанияСебестоимостиНУ3,
		|СубконтоСписанияСебестоимостиБУ1Доступность, СубконтоСписанияСебестоимостиБУ2Доступность, СубконтоСписанияСебестоимостиБУ3Доступность,
		|СубконтоСписанияСебестоимостиНУ1Доступность, СубконтоСписанияСебестоимостиНУ2Доступность, СубконтоСписанияСебестоимостиНУ3Доступность"
		);
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Товары.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ВидУчетаНУ, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз, СуммаВключаетНДС, СуммаВключаетАкциз,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
		
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти);
	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);  
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаАкцизаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Структура);  
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаАкцизаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаБУ) Тогда
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.СчетУчетаБУ),,
			"Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаНУ",
			"Объект");
			
		СтрокаТаблицы.СчетУчетаБУ = Неопределено;
		Возврат;
	КонецЕсли;
	
	// НУ
	СтрокаТаблицы.СчетУчетаНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетУчетаБУ));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	Если НЕ ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяУчетНоменклатуры(СтрокаТаблицы.СчетУчетаНУ) Тогда
		ТекстСообщения = НСтр("ru='Для счета %1 не определено субконто ""Номенклатура"". Значение очищено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрокаТаблицы.СчетУчетаНУ),,
			"Товары[" + Формат(Элементы.Товары.ТекущаяСтрока, "ЧН=0; ЧГ=") + "].СчетУчетаНУ",
			"Объект");
			
		СтрокаТаблицы.СчетУчетаНУ = Неопределено;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
								 
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовБУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");
	
	// НУ
	СтрокаТаблицы.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетДоходовБУ));	
	 	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовБУ, СчетДоходовНУ, 
		|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 1, ТекущиеДанные.СубконтоДоходовБУ1, "СубконтоДоходовНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 2, ТекущиеДанные.СубконтоДоходовБУ2, "СубконтоДоходовНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 3, ТекущиеДанные.СубконтоДоходовБУ3, "СубконтоДоходовНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  1, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  2, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  3, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетДоходовНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетДоходовНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  1, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  2, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоДоходовНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  3, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетСписанияСебестоимостиБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
								 
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиБУ, СтрокаТаблицы, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");
	
	// НУ
	СтрокаТаблицы.СчетСписанияСебестоимостиНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетСписанияСебестоимостиБУ));	
	 	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетСписанияСебестоимостиБУ, СчетСписанияСебестоимостиНУ, 
		|СубконтоСписанияСебестоимостиБУ1, СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3,
		|СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетСебестоимостиБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияСебестоимостиБУ, ТекущиеДанные.СчетСписанияСебестоимостиНУ, 1, ТекущиеДанные.СубконтоСписанияСебестоимостиБУ1, "СубконтоСписанияСебестоимостиНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияСебестоимостиБУ, ТекущиеДанные.СчетСписанияСебестоимостиНУ, 2, ТекущиеДанные.СубконтоСписанияСебестоимостиБУ2, "СубконтоСписанияСебестоимостиНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетСписанияСебестоимостиБУ, ТекущиеДанные.СчетСписанияСебестоимостиНУ, 3, ТекущиеДанные.СубконтоСписанияСебестоимостиБУ3, "СубконтоСписанияСебестоимостиНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ",  1, "СчетСписанияСебестоимостиБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ",  2, "СчетСписанияСебестоимостиБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиБУ",  3, "СчетСписанияСебестоимостиБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетСписанияСебестоимостиНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетСписанияСебестоимостиНУ, СтрокаТаблицы, ПоляОбъекта, Истина);		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1, СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	ТоварыСчетСебестоимостиНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиНУ",  1, "СчетСписанияСебестоимостиНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиНУ",  2, "СчетСписанияСебестоимостиНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСубконтоСписанияСебестоимостиНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	        
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоСписанияСебестоимостиНУ",  3, "СчетСписанияСебестоимостиНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда		
		ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, НДСВидОперацииРеализации");
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
		ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка");
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
		ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(ДанныеСтрокиТаблицы, "Услуги", ПараметрыОбъекта);		
		
		ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, 
		|СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, 
		|СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3, 
		|СчетУчетаНДСПоРеализации, НДСВидОперацииРеализации, Всего,
		|ВидСубконтоДоходовБУ1, ВидСубконтоДоходовБУ2, ВидСубконтоДоходовБУ3,
		|ВидСубконтоДоходовНУ1, ВидСубконтоДоходовНУ2, ВидСубконтоДоходовНУ3,
		|СубконтоДоходовБУ1Доступность, СубконтоДоходовБУ2Доступность, СубконтоДоходовБУ3Доступность,
		|СубконтоДоходовНУ1Доступность, СубконтоДоходовНУ2Доступность, СубконтоДоходовНУ3Доступность");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.Услуги.ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Организация, СтруктурноеПодразделение, ВидОперации, Дата, Ссылка, ТипЦен, 
		|УчитыватьКПН, УчитыватьНДС, СуммаВключаетНДС,  
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	УслугиНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
		
	ЗаполнитьЗначенияСвойств(Элементы.Услуги.ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);		
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	Структура = ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Структура);	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);

КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	// БУ
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовБУ, СтрокаТаблицы, ПоляОбъекта, Истина);

	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");
	
	// НУ
	СтрокаТаблицы.СчетДоходовНУ = ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТаблицы.СчетДоходовБУ));	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);
		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовБУ, СчетДоходовНУ, 
		|СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3,
		|СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовБУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 1, ТекущиеДанные.СубконтоДоходовБУ1, "СубконтоДоходовНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 2, ТекущиеДанные.СубконтоДоходовБУ2, "СубконтоДоходовНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	ОбщегоНазначенияБККлиентСервер.ЗаменитьСубконтоНУ(ТекущиеДанные, ТекущиеДанные.СчетДоходовБУ, ТекущиеДанные.СчетДоходовНУ, 3, ТекущиеДанные.СубконтоДоходовБУ3, "СубконтоДоходовНУ");		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  1, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  2, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовБУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовБУ",  3, "СчетДоходовБУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСчетДоходовНУПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
								 "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");

	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ПриИзмененииСчета(СтрокаТаблицы.СчетДоходовНУ, СтрокаТаблицы, ПоляОбъекта, Истина);		
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, СчетДоходовНУ, СубконтоДоходовНУ1, СубконтоДоходовНУ2, СубконтоДоходовНУ3");
		
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ДанныеОбъекта = Новый Структура("Организация");
			
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТаблицы);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
	УслугиСчетДоходовНУПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  1, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  2, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСубконтоДоходовНУ3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.Услуги.ТекущиеДанные;		
	СубконтоНачалоВыбора(Элемент, "СубконтоДоходовНУ",  3, "СчетДоходовНУ", СтрокаТаблицы, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТовары(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУслуги(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ОсновнаяФорма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьТовары(Команда)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиТовары.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУслуги(Команда)
	
	ИзменитьТабличнуюЧасть("Услуги", "Услуги");
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроизвольныйПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.Вариант		= ВариантСтандартногоПериода.ПроизвольныйПериод;
	Диалог.Период.ДатаНачала	= Объект.ДатаНачалаОтчетногоПериода;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончанияОтчетногоПериода;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПериода",ЭтаФорма);
    	
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиНовыйСчетФактуру(Команда)

	//УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "СоздатьСчетФактуру", "СчетФактураВыданный");
	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьСчетФактуру(Команда)
	
	//УчетНДСиАкцизаКлиент.ОбработатьДействиеПоВводуСчетаФактуры(ЭтаФорма, "ДополнитьСчетФактуру", "СчетФактураВыданный");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюТовары(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиТовары", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ОткрытьФормуВыбораПоступленияТоваровУслуг("Товары", "Заполнить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияТовары(Команда)
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Товары", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьПоСчету(Команда)
	
	ЗаполнитьТабличнуюЧастьПоСчету("Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПоступлениюУслуги(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиУслуги", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе 
		ОткрытьФормуВыбораПоступленияТоваровУслуг("Услуги", "Заполнить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзПоступленияУслуги(Команда)
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Услуги", "Добавить");

КонецПроцедуры

&НаКлиенте
Процедура УслугиЗаполнитьПоСчету(Команда)
	
	ЗаполнитьТабличнуюЧастьПоСчету("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныПоСебестоимости(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для заполнения цен по себестоимости необходимо записать документ.'"));
		Возврат;
	Иначе
		Если Модифицированность Тогда
			ПоказатьПредупреждение(, НСтр("ru='Документ был изменен. Для заполнения цен по себестоимости необходимо записать документ.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;

	РезультатВыполнения = ЗаполнитьЦеныПоСебестоимостиНаСервере();
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") 
		и НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	ОткрытьРеквизитыПечатиРеализации();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНомераГТД(Команда)
	
	ПараметрыФормы = ПараметрыФормыРедактированияНомеровГТД();
	НомераГТДКлиент.ОткрытьФормуРедактированияНомеровГТД(ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРедактированияНомеровГТД()
	
	Возврат НомераГТДСервер.ЗаполнитьПараметрыФормыРедактированияНомеровГТД(Объект, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки.Количество();
	Если КоличествоСтрок = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	СкопироватьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОКопированииСтрокВБуферОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	ИмяТаблицы = ПолучитьИмяТекущейТабличнойЧасти();
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		
		Возврат;
		
	КонецЕсли;
	КоличествоСтрок = ВставитьСтрокиНаСервере(ИмяТаблицы);
	ОбработкаТабличныхЧастейКлиент.ОповеститьОВставкеСтрокИзБуфераОбмена(ЭтотОбъект, КоличествоСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

/// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	ТекущаяДатаДокумента = Объект.Дата;
	ТекущийВидОперации   = Объект.ВидОперации;
		
	ТекущийКонтрагент         = Объект.Контрагент;
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ТекущийСклад 			  = Объект.Склад;
	
	УстановитьДоступностьСубконто();
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз И Объект.Товары.Количество() > 0);

	// Счет-фактура
	Если НЕ Параметры.Ключ.Пустая() Тогда
		// заполняются реквизиты формы СчетФактура и ДанныеСчетаФактуры
		УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");
	КонецЕсли;
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);
	
	НастройкиПользователя = ПользователиБКВызовСервераПовтИсп.ЗначенияНастроекПользователя(
								Пользователи.ТекущийПользователь(), "ПоказыватьВДокументахСчетаУчета,УчетПоВсемОрганизациям");
		
	ПоказыватьВДокументахСчетаУчета = НастройкиПользователя.ПоказыватьВДокументахСчетаУчета;
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);

		ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			 И (НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда
			ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, Объект.ДоговорКонтрагента);
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ТекущийКонтрагент = Неопределено;
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				Объект.Сделка = Неопределено;
				Объект.УчастникиСовместнойДеятельности.Очистить();
				ТекущийДоговорКонтрагента = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ДоговорКонтрагентаОбработатьИзменение(Неопределено);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(Объект);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
			Объект.УчитыватьНДС     = Ложь;
			Объект.СуммаВключаетНДС = Ложь;
			Объект.УчитыватьАкциз = Ложь;
			Объект.СуммаВключаетАкциз = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыВыбораВидаОперации(Элементы.ВидОперации);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	ТекущийДокументОснование = Объект.ДокументОснование;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
	Иначе 
		Элементы.Сделка.Доступность = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности, 
					Элементы.УчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, Объект.ДоговорКонтрагента);

	
	УстановитьДоступностьКомандыВставки(ЭтотОбъект, Не ОбщегоНазначения.ПустойБуферОбмена());
	
	ОбщегоНазначенияБК.УстановитьТекстАвтора(НадписьАвтор, Объект.Автор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, ЗаполнятьКоэффициентАкциза = Истина, СписокТабличныхЧастей = "Товары, Услуги")

	Если ЗаполнятьКоэффициентАкциза Тогда
		СоответствиеТоваровИКоэффициентов = ПолучитьКоэффициентыРасчетаОблагаемойБазыАкцизаНоменклатуры(Объект.Товары);
	КонецЕсли;
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	// Заполнение колонок "Всего", "КоэффициентАкциза" в табличных частях
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		Для Каждого СтрокаТаблицы Из Объект[КлючЗначение.Ключ] Цикл
			
			СуммаАкциза = 0;
			Если КлючЗначение.Ключ = "Товары" И ЗаполнятьКоэффициентАкциза Тогда 
				ЗначениеКоэффициента = СоответствиеТоваровИКоэффициентов.Получить(СтрокаТаблицы.Номенклатура);
				СтрокаТаблицы.КоэффициентАкциза = ?(ЗначениеЗаполнено(СтрокаТаблицы.СтавкаАкциза) И ЗначениеКоэффициента <> Неопределено, ЗначениеКоэффициента, 0);
				СуммаАкциза = ?(Объект.СуммаВключаетАкциз, 0, СтрокаТаблицы.СуммаАкциза);
			КонецЕсли;
			
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) + СуммаАкциза;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Доступность взаимосвязанных полей
	Элементы.ВидУчетаНУ.Видимость       			= Объект.УчитыватьКПН;
	Элементы.ДекорацияВидУчетаНУ.Видимость          = (НЕ Объект.УчитыватьКПН) ИЛИ (НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль);
	Элементы.ДекорацияУчитыватьКПН.Видимость        = НЕ Форма.ОрганизацияПлательщикНалогаНаПрибыль;
	Элементы.ГруппаИтогиНДС.Видимость   			= Объект.УчитыватьНДС;
	Элементы.ГруппаИтогиАкциз.Видимость 			= Объект.УчитыватьАкциз;
	
	Форма.ВидимостьНалоговогоУчета = Объект.УчитыватьКПН И (Форма.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль ИЛИ Объект.ВидУчетаНУ = ПредопределенноеЗначение("Справочник.ВидыУчетаНУ.НУ"));
	
	Элементы.ТоварыСчетУчетаНУ.Видимость                        = Форма.ВидимостьНалоговогоУчета;
	Элементы.ТоварыСчетДоходовНУ.Видимость                      = Форма.ВидимостьНалоговогоУчета;
	Элементы.ТоварыГруппаСубконтоСчетаНУ.Видимость              = Форма.ВидимостьНалоговогоУчета;
	Элементы.ТоварыСчетСписанияСебестоимостиНУ.Видимость        = Форма.ВидимостьНалоговогоУчета;
	Элементы.ТоварыГруппаСубконтоСчетаСебестоимостиНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	Элементы.ТоварыСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ТоварыСчетУчетаНДСПоРеализации.Видимость = Объект.УчитыватьНДС;
	Элементы.ТоварыНДСВидОперацииРеализации.Видимость = Объект.УчитыватьНДС;
	
	Элементы.УслугиСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиСчетУчетаНДСПоРеализации.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиНДСВидОперацииРеализации.Видимость = Объект.УчитыватьНДС;
	
	Элементы.УслугиСчетДоходовНУ.Видимость         = Форма.ВидимостьНалоговогоУчета;
	Элементы.УслугиГруппаСубконтоСчетаНУ.Видимость = Форма.ВидимостьНалоговогоУчета;
	
	// Счет-фактура
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(Форма);
	
	ОбновитьИтоги(Форма);
	СформироватьНадписьЦеныИВалюта(Форма);
	
	// Видимость счетов учета
	Элементы.ГруппаСчетаУчета.Видимость = Форма.ПоказыватьВДокументахСчетаУчета;
	
	Элементы.ТоварыОткрытьНомераГТД.Видимость = Форма.ВедетсяУчетПоТоварамОрганизацийБУ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБККлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	ОрганизацияПлательщикНалогаНаПрибыль = ПроцедурыНалоговогоУчета.ПолучитьПризнакПлательщикаНалогаНаПрибыль(Объект.Организация, Объект.Дата);
	ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль = ОрганизацияПлательщикНалогаНаПрибыль И ПроцедурыНалоговогоУчета.ПоддержкаУчетаВременныхРазницПоНалогуНаПрибыль(Объект.Организация, Объект.Дата);
	
	ВедетсяУчетПоТоварамОрганизацийБУ = НомераГТДСервер.ВедетсяУчетПоТоварамОрганизаций(Объект.Дата);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьТекущуюСтраницуОсновнойПанели()
	
	СписокТабличныхЧастей = Новый СписокЗначений;	
	СписокТабличныхЧастей.Добавить("Товары", "Товары");
	СписокТабличныхЧастей.Добавить("Услуги", "Услуги");
	
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБКВызовСервера.ПолучитьТекущуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокТабличныхЧастей);
	ОбщегоНазначенияБКВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;		
	
	Форма.ИтогиВсегоНДС   = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
	Форма.ИтогиВсегоАкциз = Объект.Товары.Итог("СуммаАкциза");
	Форма.ИтогиВсего      = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
	Если Объект.УчитыватьНДС
		   И НЕ Объект.СуммаВключаетНДС Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоНДС;
	КонецЕсли;
	
	Если Объект.УчитыватьАкциз
		   И НЕ Объект.СуммаВключаетАкциз Тогда
		Форма.ИтогиВсего = Форма.ИтогиВсего + Форма.ИтогиВсегоАкциз;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораВидаОперации(Элемент)
	
	МассивПараметровВыбора = Новый Массив;
	//МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Документы.РеализацияТоваровУслуг.ДоступныеВидыОпераций()));
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// При изменении реквизитов (на сервере)

&НаСервере
Процедура ДатаПриИзмененииНаСервере(СтруктураРезультатаВыполненияПриИзмененииДаты)
	
	УстановитьФункциональныеОпцииФормы();
	
	ИзменятьУчетНДС = Истина;
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
		ИзменятьУчетНДС = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(Объект, ВалютаРегламентированногоУчета, , ИзменятьУчетНДС, СтруктураРезультатаВыполненияПриИзмененииДаты);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере(СтруктураПараметров)
	
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекущийКонтрагент = Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		ТекущийДоговорКонтрагента = Неопределено;
	КонецЕсли;

	ВидОперацииОбработатьИзменение();
	Если СтруктураПараметров.Свойство("ПерезаполнитьСчетаУчета") И СтруктураПараметров.ПерезаполнитьСчетаУчета Тогда 
		ЗаполнитьСчетаУчетаНаСервере(Истина, (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0));
		Если ПоказыватьВДокументахСчетаУчета Тогда 
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекущуюСтраницуОсновнойПанели();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), Объект.Ссылка, ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииОбработатьИзменение()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению Тогда
		
		Если Объект.УчитыватьНДС ИЛИ Объект.УчитыватьАкциз Тогда
			
			ТекущийСуммаВключаетНДС 	= Объект.СуммаВключаетНДС;
			ТекущийСуммаВключаетАкциз 	= Объект.СуммаВключаетАкциз;
			
			Объект.УчитыватьНДС 		= Ложь;
			Объект.СуммаВключаетНДС 	= Ложь;
			Объект.УчитыватьАкциз 		= Ложь;
			Объект.СуммаВключаетАкциз 	= Ложь;
			
			СтруктураПересчетаСуммы		= ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
			
			Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
				
				//Получим Сумму акциза на единицу товаров, т.к. акциз может быть рассчитан по коэффициенту
				Количество 	 = СтрокаТабличнойЧасти.Количество;
				СуммаАкциза  = СтрокаТабличнойЧасти.СуммаАкциза/?(Количество = 0, 1, Количество); 
				
				// Если надо пересчитать цены при изменении флагов налогообложения
				СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
																											  Неопределено,
																											  ТекущийСуммаВключаетНДС,
																											  Объект.УчитыватьНДС,
																											  Объект.СуммаВключаетНДС,
																											  УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
																											  ТекущийСуммаВключаетАкциз,
																											  Объект.УчитыватьАкциз,
																											  Объект.СуммаВключаетАкциз,
																											  СуммаАкциза);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
				
			КонецЦикла;
			
			Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
				
				// Если надо пересчитать цены при изменении флагов налогообложения
				СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена,
																											  Неопределено,
																											  ТекущийСуммаВключаетНДС,
																											  Объект.УчитыватьНДС,
																											  Объект.СуммаВключаетНДС,
																											  УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе 
		
		Если Не Объект.УчитыватьНДС Тогда

			Объект.УчитыватьНДС            = Истина;
			Объект.СуммаВключаетНДС        = Ложь;

		КонецЕсли;

		ТекущийСуммаВключаетНДС 	= Объект.СуммаВключаетНДС;
		ТекущийСуммаВключаетАкциз 	= Объект.СуммаВключаетАкциз;
		
		СтруктураПересчетаСуммы		= ОбработкаТабличныхЧастейКлиентСервер.ПодготовитьСтруктуруДляРасчетаСумм(Объект);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			
			СуммаАкциза = 0;
			
			СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
																										  Неопределено,
																										  ТекущийСуммаВключаетНДС,
																										  Объект.УчитыватьНДС,
																										  Объект.СуммаВключаетНДС, 
																										  УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),
																										  ТекущийСуммаВключаетАкциз,
																										  Объект.УчитыватьАкциз,
																										  Объект.СуммаВключаетАкциз,
																										  СуммаАкциза);
		
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
			
		КонецЦикла;
			
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			
			СтрокаТабличнойЧасти.Цена = ОбработкаТабличныхЧастейКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
																										  Неопределено,
																										  ТекущийСуммаВключаетНДС,
																										  Объект.УчитыватьНДС,
																										  Объект.СуммаВключаетНДС, 
																										  УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СтруктураПересчетаСуммы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекущийВидОперации = Объект.ВидОперации;
	
КонецПроцедуры

&НаСервере
Процедура УчитыватьКПНПриИзмененииНаСервере()
	
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере(СтруктураРезультатаВыполнения)
	
	ОтказОтВыбранного = Ложь;
	ПроверитьСоответсвиеКонтрагентаВидуОперации(Объект.ВидОперации, Объект.Контрагент, Объект.ДоговорКонтрагента, ОтказОтВыбранного);
	Если ОтказОтВыбранного Тогда
		ТекущийДоговорКонтрагента = Неопределено;
		ТекущийКонтрагент         = Неопределено;
		Возврат;
	КонецЕсли;

	ИсходныйДоговор = Объект.ДоговорКонтрагента;
	
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияКонтрагента(Объект, СтруктураДоступныхВидовДоговоров());
	
	//очистим данные грузополучателя
	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		Объект.Грузополучатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");		
	КонецЕсли;
	
	//очистим данные адреса доставки
	Если ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
		Объект.АдресДоставки = "";
	КонецЕсли;
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	
	ЗаполнитьСчетаПослеИзмененияКонтрагента = ЗначениеЗаполнено(Объект.Контрагент) И Объект.Контрагент <> ТекущийКонтрагент;
	ЗаполнитьСчетаПослеИзмененияДоговора    = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И ИсходныйДоговор <> Объект.ДоговорКонтрагента;

	Если (ЗаполнитьСчетаПослеИзмененияКонтрагента ИЛИ ЗаполнитьСчетаПослеИзмененияДоговора) Тогда
		ЗаполнитьСчетаУчетаНаСервере(Истина);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ТекущийКонтрагент = ?(ЗначениеЗаполнено(Объект.Контрагент), Объект.Контрагент, Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.УчастникиСовместнойДеятельности.Очистить();
		ТекущийДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере(СтруктураРезультатаВыполнения)

	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И (СтруктураРезультатаВыполнения <> Неопределено
		   И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
		   И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента)
		   И Объект.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ЗаполнитьСчетаУчетаНаСервере(Истина);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Объект.Сделка = Неопределено;
		Объект.УчастникиСовместнойДеятельности.Очистить();
		УправлениеФормой(ЭтаФорма);
		ТекущийДоговорКонтрагента = Неопределено;
		Возврат;
	КонецЕсли;
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	УправлениеВзаиморасчетамиСервер.ПриИзмененииЗначенияДоговора(Объект, СпособЗаполненияЦен, ТекущийДоговорКонтрагента, , СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено Тогда 
		СтруктураРезультатаВыполнения.Вставить("ИзмененДоговорКонтрагента", Истина);
	КонецЕсли;
	
	Объект.УчастникиСовместнойДеятельности.Очистить();

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Элементы.Сделка.Доступность = (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам);
		ЗаполнениеДокументов.ЗаполнитьТабличнуюЧастьУчастникиСовместнойДеятельности(Объект.ДоговорКонтрагента, Объект.УчастникиСовместнойДеятельности);		
	Иначе 		
		Элементы.Сделка.Доступность = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьСвойстваЭлементовУчастниковСовместнойДеятельности(Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУчастникиСовместнойДеятельности, 
					Элементы.УчастникиСовместнойДеятельностиУчастникСовместнойДеятельности, Объект.ДоговорКонтрагента);

	
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения)
	
	Если НЕ СтруктураПараметров.ИзмененаОрганизация И НЕ СтруктураПараметров.ИзмененоСтруктурноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	//Очистить ТЧ "НомерГТД", так как могла быть уже заполнена по остаткам другой организации	
	Если Объект.НомераГТД.Количество() > 0 И ВедетсяУчетПоТоварамОрганизацийБУ Тогда
		Объект.НомераГТД.Очистить();
	КонецЕсли;
	
	ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров);
	
	УстановитьФункциональныеОпцииФормы();
	
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(Объект, , СтруктураРезультатаВыполнения);
	
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(Объект.Организация, Объект.Дата, Объект.УчитыватьКПН, Истина);
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(Объект.УчитыватьКПН, Объект.ВидУчетаНУ);
	
	ДоговорКонтрагентаОбработатьИзменение(СтруктураРезультатаВыполнения);

	РаботаСДиалогами.УстановитьЗаголовокЭлементуУправленияУчитыватьКПН(Объект.Организация, Элементы.УчитыватьКПН);
	
	Если СтруктураПараметров.Свойство("ПерезаполнитьСчетаУчета") И СтруктураПараметров.ПерезаполнитьСчетаУчета Тогда 
		
		ЗаполнитьСчетаУчетаНаСервере();
		
	Иначе 
		
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Товары");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Товары");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "Товары");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "СписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "Товары");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовБУ", "СчетДоходовБУ", "Услуги");	
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "ДоходовНУ", "СчетДоходовНУ", "Услуги");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗначенияСтруктурногоПодразделенияСервер(СтруктураПараметров)
	
	Объект.БанковскийСчетОрганизации = УправлениеДенежнымиСредствамиСервер.ПолучитьОсновнойБанковскийСчетДокумента(Объект);
	
	Если СтруктураПараметров.Свойство("ОчищатьНекорректныеЗначения") И НЕ СтруктураПараметров.ОчищатьНекорректныеЗначения Тогда 
		Возврат;
	КонецЕсли;
	
	// Если нет данных в ТЧ, то нет необходимости проверять и очищать некорректные значения субконто
	Если Объект.Товары.Количество() = 0 И Объект.Услуги.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;

	// Список для обработки ТЧ
	СписокТабличныхЧастей = Новый СписокЗначений;
	
	СписокАналитикиСчетовТовары = Новый СписокЗначений;
	СписокАналитикиСчетовУслуги = Новый СписокЗначений;
	
	// ТЧ Товары
	СписокАналитикиСчетовТовары.Добавить("ДоходовБУ"); 				// СчетДоходовБУ
	СписокАналитикиСчетовТовары.Добавить("ДоходовНУ"); 				// СчетДоходовНУ
	СписокАналитикиСчетовТовары.Добавить("СписанияСебестоимостиБУ");// СчетСписанияСебестоимостиБУ
	СписокАналитикиСчетовТовары.Добавить("СписанияСебестоимостиНУ");// СчетСписанияСебестоимостиНУ
	
	// ТЧ Услуги
	СписокАналитикиСчетовУслуги.Добавить("ДоходовБУ"); 				// СчетДоходовБУ
	СписокАналитикиСчетовУслуги.Добавить("ДоходовНУ"); 				// СчетДоходовНУ

	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Товары, СписокАналитикиСчетовТовары); 
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	СтруктураРеквизитов = Новый Структура("ТабличнаяЧасть, СписокАналитикиСчетов", Объект.Услуги, СписокАналитикиСчетовУслуги);
	СписокТабличныхЧастей.Добавить(СтруктураРеквизитов);
	
	// Очистим некорректные значения Субконто с подразделениями не входящими в выбранное структурное подразделение
	РаботаСДиалогами.ПроверитьСоответствиеПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, , СписокТабличныхЧастей); 
	
КонецПроцедуры

&НаСервере
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(СтруктураПараметров = Неопределено, СтруктураРезультатаВыполнения)
	
	Если СтруктураПараметров = Неопределено 
		ИЛИ (СтруктураПараметров.Свойство("НеобходимоИзменитьЗначенияРеквизитовОбъекта") 
				И СтруктураПараметров.НеобходимоИзменитьЗначенияРеквизитовОбъекта) Тогда 
		РаботаСДиалогами.СтруктурноеПодразделениеПриИзменении(СтруктурноеПодразделениеОрганизация, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктураПараметров);
	КонецЕсли;
	
	ПриИзмененииЗначенияОрганизацииСервер(СтруктураПараметров, СтруктураРезультатаВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(Результат, Параметры) Экспорт
	//РаботаСДиалогамиКлиент.ПослеВыбораСтруктурногоПодразделения(Результат, Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	//Если Результат.ИзмененаОрганизация ИЛИ Результат.ИзмененоСтруктурноеПодразделение Тогда
	//	Модифицированность = Истина;
	//	Результат.Вставить("НеобходимоИзменитьЗначенияРеквизитовОбъекта", Ложь);
	//	Если Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 Тогда 
	//		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Истина, Результат);
	//	Иначе 
	//		СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(Ложь, Результат);
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтруктурноеПодразделениеОрганизацияПриИзмененииНаКлиенте(ОчищатьНекорректныеЗначения, Параметры) Экспорт
	
	Параметры.Вставить("ОчищатьНекорректныеЗначения", ОчищатьНекорректныеЗначения);
		
	СтруктураРезультатаВыполнения = Неопределено;
	
	Если НЕ ПоказыватьВДокументахСчетаУчета Тогда 
		Параметры.Вставить("ПерезаполнитьСчетаУчета", Истина);
	КонецЕсли;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	ЕстьЗаполненныеТабЧасти = Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0;
	
	ПерезаполнитьСчетаУчета = Ложь;
	ТолькоСчетаРасчетов     = Ложь;
	Если Параметры.Свойство("ИзмененаОрганизация") И Параметры.ИзмененаОрганизация Тогда
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = НЕ ЕстьЗаполненныеТабЧасти;
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.ИзмененДоговорКонтрагента Тогда 
		ПерезаполнитьСчетаУчета = Истина;
		ТолькоСчетаРасчетов     = Истина;
	КонецЕсли;
	
	Если СтруктураРезультатаВыполнения <> Неопределено
		И СтруктураРезультатаВыполнения.Свойство("СписокТЧ")
		И ЕстьЗаполненныеТабЧасти Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		СтруктураРезультатаВыполнения.Вставить("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено
			И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента")
			И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса")
			И ЕстьЗаполненныетабЧасти Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		СтруктураРезультатаВыполнения.Вставить("ПерезаполнитьСчетаУчета", ПерезаполнитьСчетаУчета);
		СтруктураРезультатаВыполнения.Вставить("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	ИначеЕсли ПерезаполнитьСчетаУчета Тогда
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			Если ЕстьЗаполненныеТабЧасти Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПоказатьСообщениеОЗаполненииСчетовУчета(Объект.Ссылка);
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент	   = СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	СтрокаТабличнойЧасти.СтавкаАкциза      = СведенияОНоменклатуре.СтавкаАкциза;
	СтрокаТабличнойЧасти.КоэффициентАкциза = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза), СведенияОНоменклатуре.КоэффициентРасчетаОблагаемойБазыАкциза, 0);
		
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
	
	ПоляОбъектаСубконтоДоходовБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоДоходовНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПоляОбъектаСубконтоСписанияСебестоимостиБУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
	ПоляОбъектаСубконтоСписанияСебестоимостиНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовБУ);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоДоходовНУ);
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиБУ);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоСписанияСебестоимостиНУ);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС, ДанныеОбъекта.СуммаВключаетАкциз);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		   = СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			   = СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС         = СведенияОНоменклатуре.СтавкаНДС;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
	
	ПоляОбъектаСубконто		= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	ПоляОбъектаСубконтоНУ	= Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
КонецПроцедуры 

// Цены и валюта

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)

	Объект = Форма.Объект;
	Форма.ЦеныИВалюта = ОбщегоНазначенияБККлиентСервер.СформироватьНадписьЦеныИВалюта(Объект);
	
	Форма.Элементы.ГруппаИтогиНДС.Видимость   = Объект.УчитыватьНДС;
	Форма.Элементы.ГруппаИтогиАкциз.Видимость = Объект.УчитыватьАкциз;

	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогоВсегоНДС.Заголовок = "НДС (в т. ч.)";
	Иначе
		Форма.Элементы.ГруппаИтогиНДС.ПодчиненныеЭлементы.ИтогоВсегоНДС.Заголовок = "НДС (сверху)";
	КонецЕсли;
	
	Если Объект.СуммаВключаетАкциз Тогда
		Форма.Элементы.ГруппаИтогиАкциз.ПодчиненныеЭлементы.ИтогоВсегоАкциз.Заголовок = "Акциз (в т. ч.)";		
	Иначе
		Форма.Элементы.ГруппаИтогиАкциз.ПодчиненныеЭлементы.ИтогоВсегоАкциз.Заголовок = "Акциз (сверху)";		
	КонецЕсли;

КонецПроцедуры

// Подбор товаров

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)
    
	ДатаРасчетов		 = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата());
	
	ЗаголовокПодбора	 = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("ru = '" + ИмяТаблицы + "'");
	
	ЗаголовокПодбора     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаРасчетов"            , ДатаРасчетов);
	ПараметрыФормы.Вставить("Организация"             , Объект.Организация);
	ПараметрыФормы.Вставить("СтруктурноеПодразделение", Объект.СтруктурноеПодразделение);
	ПараметрыФормы.Вставить("Склад"                   , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"               , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ИмяТаблицы"              , ИмяТаблицы);
	ПараметрыФормы.Вставить("Товар"                   , ИмяТаблицы = "Товары");
	ПараметрыФормы.Вставить("Услуги"                  , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("ЕстьЦена"                , Истина);
	ПараметрыФормы.Вставить("ТипЦен"                  , Объект.ТипЦен);
	ПараметрыФормы.Вставить("ВалютаДокумента"         , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("ВыбиратьВсе"             , Истина);	
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить("ПоСправочнику", "По справочнику");
	Если ИмяТаблицы = "Товары" Тогда
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "Остатки номенклатуры");
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда 
			СписокЗапросов.Добавить("ЦеныНоменклатуры", "Цены номенклатуры");
			СписокЗапросов.Добавить("ОстаткиИЦеныНоменклатуры", "Остатки и цены номенклатуры");
		КонецЕсли;
	ИначеЕсли ИмяТаблицы = "Услуги" Тогда
		Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда 
			СписокЗапросов.Добавить("ЦеныУслуг", "Цены услуг");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СписокВидовПодбора", СписокЗапросов);
	ПараметрыФормы.Вставить("ОбъектСсылка"      , Объект.Ссылка);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере("Товары"));
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументВалюта", 			    Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс", 			    Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность", 			Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС", 	Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС", 		Объект.УчитыватьНДС); 
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетАкциз", 	Объект.СуммаВключаетАкциз);
	ПараметрыОбработки.Вставить("ДокументУчитыватьАкциз", 		Объект.УчитыватьАкциз); 
	ПараметрыОбработки.Вставить("ДокументТипЦен", 				Объект.ТипЦен);	

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)
	
	Если ИмяТаблицы <> "Товары" И ИмяТаблицы <> "Услуги" Тогда
        // Ошибочное имя табличной части
		Возврат;
	КонецЕсли;

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");
	
	СписокСвойств = Неопределено;	
	Если ЭтоВставкаИзБуфера Тогда		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;		
	Иначе                                               		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);		
	КонецЕсли; 	

	
	ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС, УчитыватьАкциз");
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СведенияОСпискеНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), Объект);
		
	СтрокиДляЗаполненияСчетов = Новый Массив;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтрокаТабличнойЧасти = Неопределено;
		Если НЕ ЭтоВставкаИзБуфера Тогда
			
			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			//  Если найдем - увеличим количество; не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
			Если ИмяТаблицы = "Товары" Тогда
				СтруктураОтбора.Вставить("ЕдиницаИзмерения", СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Цена) Тогда
				СтруктураОтбора.Вставить("Цена", СтрокаТовара.Цена);
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		КонецЕсли;
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТабличнойЧасти.Номенклатура);
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			Если ИмяТаблицы = "Товары" Тогда 
				Если Объект.УчитыватьАкциз Тогда 
					Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза) Тогда
						СтрокаТабличнойЧасти.СтавкаАкциза = СведенияОНоменклатуре.СтавкаАкциза;
					КонецЕсли;
					СтрокаТабличнойЧасти.КоэффициентАкциза = СведенияОНоменклатуре.КоэффициентРасчетаОблагаемойБазыАкциза;
				КонецЕсли;
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Объект);
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
			
		Иначе
			
			СведенияОНоменклатуре = СведенияОСпискеНоменклатуры.Получить(СтрокаТовара.Номенклатура);

			Если ЭтоВставкаИзБуфера 
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда 				
				Если СведенияОНоменклатуре.Услуга Тогда 					
					Если ИмяТаблицы = "Товары" Тогда 						
						Продолжить; 						
					КонецЕсли;  					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда 						
						Продолжить;    						
					КонецЕсли;     					
				КонецЕсли;  				
			КонецЕсли;

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
						
			Если ИмяТаблицы = "Товары" Тогда
				СтрокаТабличнойЧасти.Коэффициент = СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.КлючСвязи = ОбщегоНазначенияБККлиентСервер.НовыйКлючСвязиСтрокиТаблицы(Объект[ИмяТаблицы]);
			КонецЕсли;
			
			Если ИмяТаблицы = "Услуги" Тогда
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
			
			Документы.РеализацияТоваровУслуг.ЗаполнитьРеквизитыНалоговогоУчета(Объект, СтрокаТабличнойЧасти, ИмяТаблицы);
			
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			Если ИмяТаблицы = "Товары" Тогда 
				Если Объект.УчитыватьАкциз Тогда 
					СтрокаТабличнойЧасти.СтавкаАкциза 		= СведенияОНоменклатуре.СтавкаАкциза;
					СтрокаТабличнойЧасти.КоэффициентАкциза 	= СведенияОНоменклатуре.КоэффициентРасчетаОблагаемойБазыАкциза;
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуАкцизаТабЧасти(СтрокаТабличнойЧасти, Объект);
				КонецЕсли;
			КонецЕсли;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
			
            Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре, НЕ ЭтоВставкаИзБуфера);
			
			УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТабличнойЧасти, ИмяТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИтоги(ЭтаФорма);
	
	Если ЭтоВставкаИзБуфера Тогда
		
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = СтрокиДляЗаполненияСчетов.Количество();
		
	КонецЕсли; 

КонецПроцедуры

// Служебные процедуры и функции

&НаСервере
Процедура ЗаполнитьСчетаУчетаНаСервере(ЗаполнятьСчетаРасчетов = Ложь, ЗаполнятьСчетаТабЧастей = Ложь)

	Если Объект.Товары.Количество() > 0 И ЗаполнятьСчетаТабЧастей Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	Если Объект.Услуги.Количество() > 0 И  ЗаполнятьСчетаТабЧастей Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	
	УстановитьДоступностьСубконто();
	
	Если ЗаполнятьСчетаРасчетов Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНаСервере(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ПараметрыОбъекта)
		
	Документы.РеализацияТоваровУслуг.ЗаполнитьРеквизитыНалоговогоУчета(ПараметрыОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответсвиеКонтрагентаВидуОперации(ВидОперации, Контрагент, ДоговорКонтрагента, ОтказОтВыбранного = Неопределено)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.ПередачаСтруктурномуПодразделению") Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			Если Не КонтрагентКакОрганизация(Контрагент) Тогда
				
				Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
				ОтказОтВыбранного = Истина;
				
				Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
					ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
				КонецЕсли;
				
				ТекстСообщения  = НСтр("ru = 'При выбранном виде операции ""Передача структурному подразделению"" может быть выбран только контрагент, 
											 |соответствующий какому-либо структурному подразделению.
											 |Контрагент будет очищен.'");
						 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Контрагент");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентКакОрганизация(Контрагент)
	
	СобственныйКонтрагент = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент = &ЭтотКонтрагент");
	Запрос.УстановитьПараметр("ЭтотКонтрагент", Контрагент);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		СобственныйКонтрагент = Истина;
	КонецЕсли;
	
	Возврат СобственныйКонтрагент;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОЗаполненииСчетовУчета(ИмяПроцедурыОбработкиВыбораПользователя, ДопПараметры = Неопределено, ДополнениеКВопросу = "")
	
	Если ДопПараметры = Неопределено Тогда 
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='%1Установить счета учета в соответствии со значениями по умолчанию?'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДополнениеКВопросу);
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедурыОбработкиВыбораПользователя, ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор	= Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки	= ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Ссылка, Организация, ВидОперации, УчитыватьНДС, УчитыватьКПН, УчитыватьАкциз");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = ПроцедурыБухгалтерскогоУчета.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта.Дата);
		
	ЗаполнятьКоэффициентАкциза = Ложь;
	Для Каждого СтрокаТабличнойЧасти Из ДобавленныеСтроки Цикл
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьРеквизитыНалоговогоУчета(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары");
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если СчетаУчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект.УчитыватьАкциз И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаАкциза) Тогда 
			ЗаполнятьКоэффициентАкциза = Истина;
		КонецЕсли;
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
		
		УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТабличнойЧасти, "Товары");
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, ЗаполнятьКоэффициентАкциза, "Товары");
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписиСчетаФактурыНаСервере()

	// Может быть проведен исправленный счет-фактура,
	// в этом случае нужно обновить ссылку на счет-фактуру.	
	ЭтаФорма.СчетФактура = Неопределено;
	
	УчетНДСИАкциза.ПолучитьДанныеСчетаФактуры(ЭтаФорма, "СчетФактураВыданный");	
	УчетНДСИАкцизаКлиентСервер.ЗаполнитьТекстПроСчетФактуру(ЭтаФорма, ДанныеСчетаФактуры, "НадписьСчетФактура", Истина);	
	УчетНДСиАкцизаКлиентСервер.УправлениеГруппойСчетаФактуры(ЭтаФорма);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентыРасчетаОблагаемойБазыАкцизаНоменклатуры(Знач ТабличнаяЧасть)
	
	СоответствиеТоваровИКоэффициентов = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура
	|ПОМЕСТИТЬ ВТ_Номенклатура
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.СтавкаАкциза <> ЗНАЧЕНИЕ(Справочник.СтавкиАкциза.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Ключ,
	|	Номенклатура.КоэффициентРасчетаОблагаемойБазыАкциза КАК Значение
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_Номенклатура.Номенклатура
	|			ИЗ
	|				ВТ_Номенклатура КАК ВТ_Номенклатура)";
	
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеТоваровИКоэффициентов[Выборка.Ключ] = Выборка.Значение;
	КонецЦикла;
	
	Возврат СоответствиеТоваровИКоэффициентов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДоступныхВидовДоговоров()
        
    СписокВидовДоговоров = Новый Массив;
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	СписокВидовДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
    
    СтруктураВидовДоговоров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокВидовДоговоров);
    
    Возврат СтруктураВидовДоговоров;

КонецФункции

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьНомераГТД(АдресНомераГТД)		
	
	Если НЕ АдресНомераГТД = Неопределено Тогда
		ТабЗначНомераГТД = ПолучитьИзВременногоХранилища(АдресНомераГТД);
		Объект.НомераГТД.Загрузить(ТабЗначНомераГТД);
		Модифицированность = Истина;
	КонецЕсли;                                           

КонецПроцедуры

// Обработчики, вызываемые после окончания интерактивных действий пользователя

&НаКлиенте
Процедура ПереченьДокументацииЗавершениеВвода(Строка, Параметры) Экспорт

	Если Строка <> Неопределено Тогда
		
		Объект.ПереченьДокументации = Строка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПериода(Период, Параметры) Экспорт

   Если Период <> Неопределено Тогда
      
      Объект.ДатаНачалаОтчетногоПериода = Период.ДатаНачала;
      Объект.ДатаОкончанияОтчетногоПериода = Период.ДатаОкончания;
   
   КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСообщениеОЗаполненииСчетовУчета(ОбъектСсылка)
	
	ТекстСообщения = НСтр("ru = 'Счета учета изменены в соответствии со значениями по умолчанию.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ОбъектСсылка, , "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры) Экспорт
	
	//УправлениеЦенообразованиемКлиент.ПослеЗакрытияФормыЦеныИВалюта(Результат, Параметры);
	ТекущийДоговорКонтрагента = Объект.ДоговорКонтрагента;
	
	ЗаполнятьКоэффициентАкциза = Ложь;
	Если Результат <> Неопределено Тогда
		ИзмененПризнакУчетаАкциза = Результат.ЗначенияПриЗакрытии.УчитыватьАкциз <> Результат.ЗначенияПриОткрытии.УчитыватьАкциз;
		ЗаполнятьКоэффициентАкциза = ИзмененПризнакУчетаАкциза И Объект.УчитыватьАкциз И Объект.Товары.Количество() > 0;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, ЗаполнятьКоэффициентАкциза);
	ОбновитьИтоги(ЭтаФорма);	
	
	Если Параметры <> Неопределено
		И Параметры.Свойство("ДополнительныеПараметры")
		И ТипЗнч(Параметры.ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	    ПерезаполнитьСчетаУчета = ДополнительныеПараметры.Свойство("ПерезаполнитьСчетаУчета") И ДополнительныеПараметры.ПерезаполнитьСчетаУчета;
	Иначе
		ПерезаполнитьСчетаУчета = Ложь;
	КонецЕсли;
	
	Если ПерезаполнитьСчетаУчета Тогда 
		ТолькоСчетаРасчетов = ДополнительныеПараметры.Свойство("ТолькоСчетаРасчетов") И ДополнительныеПараметры.ТолькоСчетаРасчетов;
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ТолькоСчетаРасчетов") И ДопПараметры.ТолькоСчетаРасчетов Тогда 
		ЗаполнитьСчетаУчетаНаСервере(Истина);
	Иначе
		ЗаполнитьСчетаУчетаНаСервере(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПоИзменениюДаты(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;

	Если Параметры.Свойство("КурсВзаиморасчетов") Тогда
		Объект.КурсВзаиморасчетов      = Параметры.КурсВзаиморасчетов;
	КонецЕсли;
	
	Если Параметры.Свойство("КратностьВзаиморасчетов") Тогда
		Объект.КратностьВзаиморасчетов = Параметры.КратностьВзаиморасчетов;
	КонецЕсли;

	СформироватьНадписьЦеныИВалюта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснование(Результат, Параметры) Экспорт
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли;

	ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияВопросаПриИзмененииДокументОснованиеНаСервере()
	
	ИсходныеДанные = Новый Структура("ВидОперации, Организация, СтруктурноеПодразделение, Контрагент, ДоговорКонтрагента");
	ЗаполнитьЗначенияСвойств(ИсходныеДанные, Объект);
	
	ЗаполнитьПоДокументуОснованиюНаСервере();
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ИзмененаОрганизация", ИсходныеДанные.Организация <> Объект.Организация);
	ПараметрыОбработки.Вставить("ИзмененоСтруктурноеПодразделение", ИсходныеДанные.СтруктурноеПодразделение <> Объект.СтруктурноеПодразделение);
	ПараметрыОбработки.Вставить("ОчищатьНекорректныеЗначения", Истина);
	
	ПриИзмененииЗначенияОрганизацииСервер(ПараметрыОбработки, Неопределено);
	КонтрагентПриИзмененииНаСервере(Неопределено);
	ТекущийВидОперации = Объект.ВидОперации;
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтаФорма);
	
	РаботаСДиалогамиКлиентСервер.УстановитьВидимостьСтруктурногоПодразделения(Объект.Организация, Объект.СтруктурноеПодразделение, СтруктурноеПодразделениеОрганизация);
	РаботаСДиалогамиКлиентСервер.УстановитьСвойстваЭлементаСтруктурноеПодразделениеОрганизация(Элементы.СтруктурноеПодразделениеОрганизация, Объект.СтруктурноеПодразделение, ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		//УправлениеВзаиморасчетамиКлиент.ОбработатьОтказОтПересчетаДокументаПоДоговору(ЭтаФорма, Параметры);
		СформироватьНадписьЦеныИВалюта(ЭтаФорма);

		Если Параметры <> Неопределено И Параметры.Свойство("ПерезаполнитьСчетаУчета") И Параметры.ПерезаполнитьСчетаУчета Тогда 
			ТолькоСчетаРасчетов = Параметры.Свойство("ТолькоСчетаРасчетов") И Параметры.ТолькоСчетаРасчетов;
			ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
			Если ПоказыватьВДокументахСчетаУчета Тогда
				ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
			Иначе
				ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
			КонецЕсли;
		КонецЕсли;
	Иначе 		
		// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме
		//УправлениеЦенообразованиемКлиент.ОткрытьФормуЦеныИВалюта(ЭтаФорма, , Истина, Параметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовОбработатьИзменениеВидаОперации(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ПерезаполнитьСчетаУчета", Результат = КодВозвратаДиалога.Да);
	ВидОперацииПриИзмененииНаСервере(Параметры);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаПроЗаполнениеСчетовОбработатьИзменениеОрганизации(Результат, Параметры) Экспорт
	
	Параметры.Вставить("ПерезаполнитьСчетаУчета", Результат = КодВозвратаДиалога.Да);
	
	СтруктураРезультатаВыполнения = Неопределено;
	
	СтруктурноеПодразделениеОрганизацияПриИзмененииНаСервере(Параметры, СтруктураРезультатаВыполнения);
	
	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("СписокТЧ") Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить цены в табличных частях документа?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
		ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиПриЗаполненииПоСчету(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект[ДопПараметры.ТабличнаяЧасть].Очистить();
	
	Если ДопПараметры.ТабличнаяЧасть = "Товары" Тогда
		Объект.НомераГТД.Очистить();
	КонецЕсли;
	
	ОткрытьФормуВыбораСчетаНаОплату(ДопПараметры.ТабличнаяЧасть);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиТовары(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Очистить();
	Объект.НомераГТД.Очистить();
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Товары", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОчисткаТабличнойЧастиУслуги(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Услуги.Очистить();
	
	ОткрытьФормуВыбораПоступленияТоваровУслуг("Услуги", "Заполнить");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьЦеныВТабличныхЧастяхДокумента(Результат, Параметры) Экспорт
	
	СтруктураРезультатаВыполнения = Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		РаботаСДиалогамиКлиентСервер.ПерезаполнитьЦеныПриИзмененииОрганизации(Объект, Параметры);
		
	КонецЕсли;

	Если СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ИзмененДоговорКонтрагента") 
		И СтруктураРезультатаВыполнения.Свойство("ТекстВопроса") Тогда 
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаДоговорКонтрагентаПриИзменении", ЭтотОбъект, СтруктураРезультатаВыполнения);
        ПоказатьВопрос(Оповещение, СтруктураРезультатаВыполнения.ТекстВопроса, Режим, 0);
		
	ИначеЕсли СтруктураРезультатаВыполнения <> Неопределено И СтруктураРезультатаВыполнения.Свойство("ПерезаполнитьСчетаУчета")
		И СтруктураРезультатаВыполнения.ПерезаполнитьСчетаУчета Тогда 
		ТолькоСчетаРасчетов = СтруктураРезультатаВыполнения.Свойство("ТолькоСчетаРасчетов") И СтруктураРезультатаВыполнения.ТолькоСчетаРасчетов;
		ПараметрыПерезаполненияСчетов = Новый Структура("ТолькоСчетаРасчетов", ТолькоСчетаРасчетов);
		Если ПоказыватьВДокументахСчетаУчета Тогда
			ПоказатьВопросОЗаполненииСчетовУчета("ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета", ПараметрыПерезаполненияСчетов);
		Иначе
			ПослеЗакрытияВопросаПроЗаполнениеСчетовЗаполнитьСчета(КодВозвратаДиалога.Да, ПараметрыПерезаполненияСчетов);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиЗавершениеВыбора(ВыбранноеЗначение, Параметры) Экспорт

	Объект.АдресДоставки = ВыбранноеЗначение;
	Модифицированность   = Истина;
	
КонецПроцедуры

// Обработчики команд заполнения документа и табличных частей

&НаСервере
Процедура ЗаполнитьПоДокументуОснованиюНаСервере()
	
	Объект.НомераГТД.Очистить();		

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьДокументПоПоступлениюТоваровИУслуг(Объект, Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьДокументПоСчетуНаОплатуПокупателю(Объект, Объект.ДокументОснование);
	            	
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Документы.РеализацияТоваровУслуг.ЗаполнитьДокументПоСчетФактураВыданный(Объект, Объект.ДокументОснование);
		
	КонецЕсли;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(Объект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз И Объект.Товары.Количество() > 0);
	ОбновитьИтоги(ЭтаФорма);
	
	УстановитьДоступностьСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПоступленияТоваровУслуг(ТабличнаяЧасть, СпособЗаполнения)

	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	СтруктураОтбора.Вставить("Проведен",	Истина);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы", 		   ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	Документы.РеализацияТоваровУслуг.ЗаполнитьПоПоступлению(Объект, ТабличнаяЧасть, "Добавить", ВыбранноеЗначение);

	УстановитьДоступностьСубконто(ТабличнаяЧасть);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз И Объект.Товары.Количество() > 0);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработкаЗаполненияПоСчетуТабличнойЧастиНаСервере(ВыбранноеЗначение, ТабличнаяЧасть)

	Документы.РеализацияТоваровУслуг.ЗаполнитьПоСчету(Объект, ТабличнаяЧасть, ВыбранноеЗначение);

	УстановитьДоступностьСубконто(ТабличнаяЧасть);
	
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Объект.УчитыватьАкциз И Объект.Товары.Количество() > 0);
	
	ОбновитьИтоги(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличнуюЧастьПоСчету(ТабличнаяЧасть)
	
	Если Объект[ТабличнаяЧасть].Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОчисткаТабличнойЧастиПриЗаполненииПоСчету", ЭтотОбъект, Новый Структура("ТабличнаяЧасть", ТабличнаяЧасть));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе 
		ОткрытьФормуВыбораСчетаНаОплату(ТабличнаяЧасть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСчетаНаОплату(ТабличнаяЧасть)
	
	СтруктураОтбора	= Новый Структура;
	СтруктураОтбора.Вставить("Организация",	Объект.Организация);
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              СтруктураОтбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Ложь);
	СтруктураПараметров.Вставить("ИмяТаблицы",         ТабличнаяЧасть);
	
	ОткрытьФорму("Документ.СчетНаОплатуПокупателю.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоСебестоимостиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ДокументСсылка",      Объект.Ссылка);
	СтруктураПараметров.Вставить("ТабличнаяЧасть",      РеквизитФормыВЗначение("Объект", Тип("ДокументОбъект.РеализацияТоваровУслуг")).Товары.Выгрузить());
	НезаполненныеСтроки = Объект.Товары.Выгрузить();
	НезаполненныеСтроки.Очистить();
	СтруктураПараметров.Вставить("НезаполненныеСтроки", НезаполненныеСтроки);
	
	НаименованиеЗадания = "ЗаполнитьЦеныПоСебестоимости";
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Документы.РеализацияТоваровУслуг.ЗаполнитьЦеныПоСебестоимости", 
		СтруктураПараметров, 
		НаименованиеЗадания);
		
	АдресХранилища = РезультатВыполнения.АдресХранилища;

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Процедуры работы с субконто

&НаСервере
Процедура УстановитьДоступностьСубконто(СписокТабличныхЧастей = Неопределено)
	
	Если СписокТабличныхЧастей = Неопределено Тогда 
		СписокТабличныхЧастей = "Товары, Услуги";
	КонецЕсли;
	
	СтруктураТабличныхЧастей = Новый Структура(СписокТабличныхЧастей);
	
	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл 
		Для Каждого СтрокаТЧ Из Объект[КлючИЗначение.Ключ] Цикл
			УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(ЭтаФорма, СтрокаТЧ, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконтоВСтрокеТабличнойЧасти(Форма, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ИмяЭлементаДоходов = "СубконтоДоходов";
	ИмяСчетаДоходов    = "СчетДоходов";
	
	ИмяЭлементаСебестоимости = "СубконтоСписанияСебестоимости";
	ИмяСчетаСебестоимости 	 = "СчетСписанияСебестоимости";
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетДоходовНУ, СтрокаТабличнойЧасти, ПоляОбъекта);
	
	// установка параметров выбора для подчиненных и иным способом связанных объектов аналитики
	Префикс = "БУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаДоходов + Префикс + "%Индекс%", ПараметрыДокумента);					
	
	Префикс = "НУ";
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаДоходов + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаДоходов + Префикс + "%Индекс%", ПараметрыДокумента);	
	
	Если ИмяТабличнойЧасти = "Товары" Тогда 
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3");
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ, СтрокаТабличнойЧасти, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
			"СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3");
		
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ, СтрокаТабличнойЧасти, ПоляОбъекта);
		
		Префикс = "БУ";
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаСебестоимости + Префикс +"%Индекс%", ИмяСчетаСебестоимости + Префикс);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаСебестоимости + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаСебестоимости + Префикс + "%Индекс%", ПараметрыДокумента);	
		
		Префикс = "НУ";
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТабличнойЧасти, ИмяЭлементаСебестоимости + Префикс +"%Индекс%", ИмяСчетаДоходов + Префикс);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТабличнойЧасти, ИмяЭлементаСебестоимости + Префикс + "%Индекс%", ИмяТабличнойЧасти + ИмяЭлементаСебестоимости + Префикс + "%Индекс%", ПараметрыДокумента);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокПараметровВыбораСубконто(ДанныеОбъекта, ПараметрыОбъекта, ШаблонИмяПоляОбъекта, ИмяСчета)
	
	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ПараметрыОбъекта[ИмяПоля]);
		ИначеЕсли ТипЗнч(ПараметрыОбъекта[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ПараметрыОбъекта[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("СчетУчета", 				  ПараметрыОбъекта[ИмяСчета]);	
	СписокПараметров.Вставить("Организация", 			  ДанныеОбъекта.Организация);
	СписокПараметров.Вставить("СтруктурноеПодразделение", ДанныеОбъекта.СтруктурноеПодразделение);
	СписокПараметров.Вставить("ВыбиратьПодразделенияОрганизации", Истина);

	Возврат СписокПараметров; 

КонецФункции

&НаКлиенте
Процедура СубконтоНачалоВыбора(Элемент, ИмяЭлементаСубконто, ИндексСубконто, ИмяЭлементаСчета, СтрокаТаблицы, СтандартнаяОбработка)	
		
	ПараметрыДокумента = СписокПараметровВыбораСубконто(Объект, СтрокаТаблицы, ИмяЭлементаСубконто + "%Индекс%", ИмяЭлементаСчета);
	
	//ПроцедурыБухгалтерскогоУчетаКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, ИндексСубконто, СтандартнаяОбработка, ПараметрыДокумента);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Суффикс, ИмяСчета, ИмяТабличнойЧасти)
	
	Если Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока <> Неопределено Тогда
		СтрокаТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиПоИдентификатору(Форма.Элементы[ИмяТабличнойЧасти].ТекущаяСтрока);
		Если СтрокаТаблицы = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыДокумента = СписокПараметровВыбораСубконто(Форма.Объект, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяСчета);
		ПроцедурыБухгалтерскогоУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, "Субконто" + Суффикс + "%Индекс%", ИмяТабличнойЧасти + "Субконто" + Суффикс + "%Индекс%", ПараметрыДокумента);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2, СтрокаТабличнойЧасти.СубконтоДоходовБУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовБУ, СубконтоДоходовБУ1,
								 |СубконтоДоходовБУ2, СубконтоДоходовБУ3", СтрокаТабличнойЧасти.СчетДоходовБУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетСебестоимостиБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиБУ1", "СубконтоСписанияСебестоимостиБУ2", "СубконтоСписанияСебестоимостиБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиБУ, СубконтоСписанияСебестоимостиБУ1,
								 |СубконтоСписанияСебестоимостиБУ2, СубконтоСписанияСебестоимостиБУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиБУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиБУ", "СчетСписанияСебестоимостиБУ", "СубконтоСписанияСебестоимостиБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1,
								 |СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыСчетСебестоимостиНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоСписанияСебестоимостиНУ1", "СубконтоСписанияСебестоимостиНУ2", "СубконтоСписанияСебестоимостиНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3));
															
	СчетаУчета = Новый Структура("СчетСписанияСебестоимостиНУ, СубконтоСписанияСебестоимостиНУ1,
								 |СубконтоСписанияСебестоимостиНУ2, СубконтоСписанияСебестоимостиНУ3", СтрокаТабличнойЧасти.СчетСписанияСебестоимостиНУ,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ1, СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ2,
								 СтрокаТабличнойЧасти.СубконтоСписанияСебестоимостиНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоСписанияСебестоимостиНУ", "СчетСписанияСебестоимостиНУ", "СубконтоСписанияСебестоимостиНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовБУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовБУ1", "СубконтоДоходовБУ2", "СубконтоДоходовБУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2, СтрокаТабличнойЧасти.СубконтоДоходовБУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовБУ, СубконтоДоходовБУ1,
								 |СубконтоДоходовБУ2, СубконтоДоходовБУ3", СтрокаТабличнойЧасти.СчетДоходовБУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ1, СтрокаТабличнойЧасти.СубконтоДоходовБУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовБУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовБУ", "СчетДоходовБУ", "СубконтоДоходовБУ");
															
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиСчетДоходовНУПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)
	
	ПроцедурыБухгалтерскогоУчета.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
	                                        ДанныеОбъекта.Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "СубконтоДоходовНУ1", "СубконтоДоходовНУ2", "СубконтоДоходовНУ3", 
	                                                        СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2, СтрокаТабличнойЧасти.СубконтоДоходовНУ3));
															
	СчетаУчета = Новый Структура("СчетДоходовНУ, СубконтоДоходовНУ1,
								 |СубконтоДоходовНУ2, СубконтоДоходовНУ3", СтрокаТабличнойЧасти.СчетДоходовНУ,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ1, СтрокаТабличнойЧасти.СубконтоДоходовНУ2,
								 СтрокаТабличнойЧасти.СубконтоДоходовНУ3);

	ПроцедурыБухгалтерскогоУчета.ЗаполнитьАналитикуСчетаТабличнойЧасти(СтрокаТабличнойЧасти, СчетаУчета, "СубконтоДоходовНУ", "СчетДоходовНУ", "СубконтоДоходовНУ");

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Товары.Загрузить(СтруктураДанных.ТабличнаяЧасть);
	
	Для Каждого Строка Из Объект.Товары Цикл
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВсегоТабЧасти(Строка, Объект.СуммаВключаетНДС, Объект.СуммаВключаетАкциз);
	КонецЦикла;
	
	
	НезаполненныеСтроки = СтруктураДанных.НезаполненныеСтроки;
	
	КолонкаНомерСтроки = НезаполненныеСтроки.Колонки.Найти("НомерСтроки");
	Если КолонкаНомерСтроки = Неопределено Тогда
		КолонкаНомерСтроки = НезаполненныеСтроки.Колонки.Найти("LineNumber");
		Если КолонкаНомерСтроки <> Неопределено Тогда
			КолонкаНомерСтроки.Имя = "НомерСтроки";
		КонецЕсли;
	КонецЕсли;
	
	Если КолонкаНомерСтроки <> Неопределено Тогда
		Для Каждого СтрокаТабличнойЧасти Из СтруктураДанных.НезаполненныеСтроки Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Для номенклатуры ""%1"" не удалось заполнить цену по себестоимости.'"),
				СтрокаТабличнойЧасти.Номенклатура);
			Поле = "Товары[" + Формат(СтрокаТабличнойЧасти.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Номенклатура";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция ОбъектСпособВыпискиАктовВыполненныхРабот()
	СпособВыписки = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде;
	Возврат СпособВыписки;
КонецФункции

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации()
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДоверенностьВыдана",              Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",                Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",                Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",               Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("УдалитьДоверенность",             Объект.УдалитьДоверенность);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                  ЭтаФорма.ТолькоПросмотр);
	СтруктураПараметров.Вставить("Грузополучатель",                 Объект.Грузополучатель);
	СтруктураПараметров.Вставить("АдресДоставки",                   Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",       Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Организация",                     Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент",                      Объект.Контрагент);
	СтруктураПараметров.Вставить("ТипОбъекта",                      "РеализацияТоваровУслуг");
	СтруктураПараметров.Вставить("ПереченьДокументации",            Объект.ПереченьДокументации);
	СтруктураПараметров.Вставить("ДатаНачалаОтчетногоПериода",      Объект.ДатаНачалаОтчетногоПериода);
	СтруктураПараметров.Вставить("ДатаОкончанияОтчетногоПериода",   Объект.ДатаОкончанияОтчетногоПериода);
	СтруктураПараметров.Вставить("НомерДокументаГЗ",                Объект.НомерДокументаГЗ);
	СтруктураПараметров.Вставить("ДатаДокументаГЗ",                 Объект.ДатаДокументаГЗ);
	СтруктураПараметров.Вставить("ДатаПодписанияГЗ",                Объект.ДатаПодписанияГЗ);
	СтруктураПараметров.Вставить("Дата",                            Объект.Дата);
	СтруктураПараметров.Вставить("СпособВыпискиАктовВыполненныхРабот",      ОбъектСпособВыпискиАктовВыполненныхРабот());
	СтруктураПараметров.Вставить("ВидОперации",                     Объект.ВидОперации);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТабличнуюЧасть(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ОбработкаТабличнойЧастиДокументов.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОбработкиТабличнойЧасти(ИмяТабличнойЧасти, СинонимТабличнойЧасти)
	
	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТабличнойЧасти", ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти));
	ПараметрыОбработки.Вставить("ДокументСсылка"              , Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата"                , Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументВалюта"              , Объект.ВалютаДокумента);
	ПараметрыОбработки.Вставить("ДокументКурс"                , Объект.КурсВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументКратность"           , Объект.КратностьВзаиморасчетов);
	ПараметрыОбработки.Вставить("ДокументСуммаВключаетНДС"    , Объект.СуммаВключаетНДС);
	ПараметрыОбработки.Вставить("ДокументУчитыватьНДС"        , Объект.УчитыватьНДС);
	ПараметрыОбработки.Вставить("ДокументНДСВключенВСтоимость", Ложь);
	ПараметрыОбработки.Вставить("ИмяТаблицы"                  , ИмяТабличнойЧасти);
	ПараметрыОбработки.Вставить("Заголовок"                   , СинонимТабличнойЧасти);
	
	СтруктураРеквизитов          = Новый Структура;
	СтруктураСвязанныхРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Содержание");
	СтруктураРеквизитов.Вставить("Количество");
	СтруктураРеквизитов.Вставить("Цена");
	СтруктураРеквизитов.Вставить("СтавкаНДС");
	СтруктураРеквизитов.Вставить("СчетУчетаНДСПоРеализации");
	СтруктураРеквизитов.Вставить("НДСВидОперацииРеализации");
	
	СтруктураРеквизитов.Вставить("СчетДоходовБУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовБУ3");
	
	СтруктураРеквизитов.Вставить("СчетДоходовНУ");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ1");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ2");
	СтруктураРеквизитов.Вставить("СубконтоДоходовНУ3");
		
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовБУ", "СубконтоДоходовБУ1,СубконтоДоходовБУ2,СубконтоДоходовБУ3");
	СтруктураСвязанныхРеквизитов.Вставить("СчетДоходовНУ", "СубконтоДоходовНУ1,СубконтоДоходовНУ2,СубконтоДоходовНУ3");
	
	ПараметрыОбработки.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
	ПараметрыОбработки.Вставить("СтруктураСвязанныхРеквизитов", СтруктураСвязанныхРеквизитов);
	
	ВидимыеКолонки = Новый Массив;
	ПолучитьВидимыеКолонкиТабличнойЧасти(Элементы[ИмяТабличнойЧасти], Элементы[ИмяТабличнойЧасти].ПутьКДанным + ".", ВидимыеКолонки);
	ПараметрыОбработки.Вставить("ВидимыеКолонки", ВидимыеКолонки);

	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличнуюЧастьВоВременноеХранилищеНаСервере(ИмяТабличнойЧасти)

	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабличнойЧасти].Выгрузить(), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПолучитьВидимыеКолонкиТабличнойЧасти(ЭлементТабличнаяЧасть, ПутьКДаннымТаблицы, МассивКолонок)
	
	Для Каждого Элемент Из ЭлементТабличнаяЧасть.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			ПолучитьВидимыеКолонкиТабличнойЧасти(Элемент, ПутьКДаннымТаблицы, МассивКолонок);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Элемент.Видимость Тогда
			МассивКолонок.Добавить(СтрЗаменить(Элемент.ПутьКДанным, ПутьКДаннымТаблицы, ""));
		КонецЕсли;
	КонецЦикла;

КонецФункции

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиНаСервере(Параметры)

	ТаблицаОбработки  = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиВХранилище);
	ИмяТабличнойЧасти = Параметры.ИмяТаблицы;
	
	Объект[ИмяТабличнойЧасти].Загрузить(ТаблицаОбработки);
	ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Ложь, "Услуги");
		
	УправлениеФормой(ЭтаФорма);         
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Объект.Склад = ТекущийСклад Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСклад = Объект.Склад;
	
	Если Объект.НомераГТД.Количество() > 0 Тогда
		Объект.НомераГТД.Очистить();		
	КонецЕсли;  
	
КонецПроцедуры

#Область КопированиеВставкаСтрокЧерезБуферОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТаблицы)
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект[ИмяТаблицы], 
		Элементы[ИмяТаблицы].ВыделенныеСтроки, Объект.Ссылка.Метаданные().Имя);

КонецПроцедуры

&НаСервере
Функция ВставитьСтрокиНаСервере(ИмяТаблицы)
	
	ПараметрыВставки = ОбработкаТабличныхЧастей.ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Объект.Ссылка, ИмяТаблицы);
	ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки);
	ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ПараметрыВставки, ПараметрыВставки.ИмяТаблицы);
	
	Возврат ПараметрыВставки.КоличествоДобавленныхСтрок;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяТекущейТабличнойЧасти()
	
	ИмяТекущейСтраницы = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	ИмяТаблицы = "";
	Если ИмяТекущейСтраницы = "ГруппаТовары" Тогда		
		ИмяТаблицы = "Товары";
	ИначеЕсли ИмяТекущейСтраницы = "ГруппаУслуги" Тогда		
		ИмяТаблицы = "Услуги";                         		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

&НаСервере
Процедура ОпределитьСписокСвойствДляВставкиИзБуфера(ПараметрыВставки)
	
	СписокСвойств = Новый Массив;

	Если ПараметрыВставки.ИмяТаблицы = "Товары" Тогда
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("ЕдиницаИзмерения");
		СписокСвойств.Добавить("Коэффициент");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");
		СписокСвойств.Добавить("СтавкаАкциза");
		
		Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 			
			СписокСвойств.Добавить("АкцизВидОперацииРеализации");	
		КонецЕсли;
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаБУ");				
			СписокСвойств.Добавить("СчетУчетаНУ");				
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");		
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда
				СписокСвойств.Добавить("СчетДоходовБУ");	
				СписокСвойств.Добавить("СубконтоДоходовБУ1");
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");
				
				СписокСвойств.Добавить("СчетДоходовНУ");	
				СписокСвойств.Добавить("СубконтоДоходовНУ1");
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
				
				СписокСвойств.Добавить("СчетСписанияСебестоимостиБУ");	
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ1");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ2");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиБУ3");
				
				СписокСвойств.Добавить("СчетСписанияСебестоимостиНУ");	
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ1");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ2");
				СписокСвойств.Добавить("СубконтоСписанияСебестоимостиНУ3"); 				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПараметрыВставки.ИмяТаблицы = "Услуги" Тогда
		
		СписокСвойств.Добавить("Номенклатура");
		СписокСвойств.Добавить("Содержание");
		СписокСвойств.Добавить("Количество");
		СписокСвойств.Добавить("Цена");
		СписокСвойств.Добавить("СтавкаНДС");
		СписокСвойств.Добавить("НДСВидОперацииРеализации");
		
		
		Если ПараметрыВставки.ПоказыватьСчетаУчетаВДокументах Тогда
			
			СписокСвойств.Добавить("СчетУчетаНДСПоРеализации");	
			
			Если ПараметрыВставки.ИсточникИДокументОдногоВида Тогда 		
				СписокСвойств.Добавить("СчетДоходовБУ");	
				СписокСвойств.Добавить("СубконтоДоходовБУ1");
				СписокСвойств.Добавить("СубконтоДоходовБУ2");
				СписокСвойств.Добавить("СубконтоДоходовБУ3");
				
				СписокСвойств.Добавить("СчетДоходовНУ");	
				СписокСвойств.Добавить("СубконтоДоходовНУ1");
				СписокСвойств.Добавить("СубконтоДоходовНУ2");
				СписокСвойств.Добавить("СубконтоДоходовНУ3");
				
			КонецЕсли;   	
			
		КонецЕсли;
	КонецЕсли;    	
	
	ПараметрыВставки.СписокСвойств = ОбработкаТабличныхЧастей.ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(
	ПараметрыВставки.Данные, СписокСвойств);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандыВставки(Форма, Доступность)

	Доступность = Не Форма.ТолькоПросмотр И Доступность;
	Элементы = Форма.Элементы;
	Элементы.ТоварыВставитьСтроки.Доступность					 = Доступность;
	Элементы.ТоварыКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	Элементы.УслугиВставитьСтроки.Доступность					 = Доступность;
	Элементы.УслугиКонтекстноеМенюВставитьСтроки.Доступность	 = Доступность;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборВставкаИзБуфераНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы);
			
КонецПроцедуры

#КонецОбласти

#КонецОбласти


//**** DANIL 25.04.2019
//создание документа реализация товаров и услуг, а так же обновление документов  реализация товаров и услуг
&НаСервере
Функция dm_СозданиеРеализацииНаОснованииЗаявкиПокупателя(Основание,ПризнакОткрытияДокумента)Экспорт
	
	    ДанныеЗаполнения = Основание;
	
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.dm_ЗаявкаПокупателя") Тогда
			
		СоздатьДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();	
		
		// Заполнение шапки
		СоздатьДокумент.Дата = ТекущаяДата();
		СоздатьДокумент.Автор = ДанныеЗаполнения.Автор;
		СоздатьДокумент.АдресДоставки = ДанныеЗаполнения.АдресДоставки;
		СоздатьДокумент.БанковскийСчетОрганизации = ДанныеЗаполнения.БанковскийСчетОрганизации;
		СоздатьДокумент.ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента;
		СоздатьДокумент.ВидОперации = ДанныеЗаполнения.ВидОперации;
		СоздатьДокумент.ВидУчетаНУ = ДанныеЗаполнения.ВидУчетаНУ;
		СоздатьДокумент.Грузополучатель = ДанныеЗаполнения.Грузополучатель;
		СоздатьДокумент.ДатаНачалаОтчетногоПериода = ДанныеЗаполнения.ДатаНачалаОтчетногоПериода;
		СоздатьДокумент.ДатаОкончанияОтчетногоПериода = ДанныеЗаполнения.ДатаОкончанияОтчетногоПериода;
		//СоздатьДокумент.Доверенность = ДанныеЗаполнения.Доверенность;
		//СоздатьДокумент.ДоверенностьЧерезКого = ДанныеЗаполнения.ДоверенностьЧерезКого;
		СоздатьДокумент.ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
		СоздатьДокумент.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		
		СоздатьДокумент.dm_ДокументОснованиеЗаявкаПокупателя = ДанныеЗаполнения;
		СоздатьДокумент.dm_СтатусДокументаXMLЗаявкиРеализация = Объект.СтатусДокументаXMLЗаявки;//Перечисления.СтатусЗаявкаПокупателяXML.Не_Участвует;
		
		СоздатьДокумент.dm_НомерЗаявкиПокупателя = ДанныеЗаполнения.НомерЗаявки;
		СоздатьДокумент.dm_ДатаЗаявкиПокупателя = ДанныеЗаполнения.ДатаЗаявки;
		
		СоздатьДокумент.dm_Контрагент_BUYER_GLN = ДанныеЗаполнения.dm_Контрагент_BUYER_GLN;
		СоздатьДокумент.dm_Контрагент_BUYER_GLN_Инфо = ДанныеЗаполнения.dm_Контрагент_BUYER_GLN_Инфо;

		
		СоздатьДокумент.Комментарий = ДанныеЗаполнения.Комментарий;
		СоздатьДокумент.Контрагент = ДанныеЗаполнения.Контрагент;
		СоздатьДокумент.КратностьВзаиморасчетов = ДанныеЗаполнения.КратностьВзаиморасчетов;
		СоздатьДокумент.КурсВзаиморасчетов = ДанныеЗаполнения.КурсВзаиморасчетов;
		СоздатьДокумент.Организация = ДанныеЗаполнения.Организация;
		СоздатьДокумент.Ответственный = ДанныеЗаполнения.Ответственный;
		СоздатьДокумент.ПереченьДокументации = ДанныеЗаполнения.ПереченьДокументации;
		СоздатьДокумент.РучнаяКорректировка = ДанныеЗаполнения.РучнаяКорректировка;
		СоздатьДокумент.Склад = ДанныеЗаполнения.Склад;
		СоздатьДокумент.СтруктурноеПодразделение = ДанныеЗаполнения.СтруктурноеПодразделение;
		СоздатьДокумент.СуммаВключаетАкциз = ДанныеЗаполнения.СуммаВключаетАкциз;
		СоздатьДокумент.СуммаВключаетНДС = ДанныеЗаполнения.СуммаВключаетНДС;
		СоздатьДокумент.СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		СоздатьДокумент.СчетУчетаРасчетовПоАвансам = ДанныеЗаполнения.СчетУчетаРасчетовПоАвансам;
		СоздатьДокумент.СчетУчетаРасчетовСКонтрагентом = ДанныеЗаполнения.СчетУчетаРасчетовСКонтрагентом;
		СоздатьДокумент.ТипЦен = ДанныеЗаполнения.ТипЦен;
		//СоздатьДокумент.УдалитьОтражатьВНалоговомУчете = ДанныеЗаполнения.УдалитьОтражатьВНалоговомУчете;
		СоздатьДокумент.УчитыватьАкциз = ДанныеЗаполнения.УчитыватьАкциз;
		СоздатьДокумент.УчитыватьКПН = ДанныеЗаполнения.УчитыватьКПН;
		СоздатьДокумент.УчитыватьНДС = ДанныеЗаполнения.УчитыватьНДС;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = СоздатьДокумент.Товары.Добавить();
			НоваяСтрока.АкцизВидОперацииРеализации = ТекСтрокаТовары.АкцизВидОперацииРеализации;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Коэффициент = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.НДСВидОперацииРеализации = ТекСтрокаТовары.НДСВидОперацииРеализации;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.СтавкаАкциза = ТекСтрокаТовары.СтавкаАкциза;
			НоваяСтрока.СтавкаНДС = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.СубконтоДоходовБУ1 = ТекСтрокаТовары.СубконтоДоходовБУ1;
			НоваяСтрока.СубконтоДоходовБУ2 = ТекСтрокаТовары.СубконтоДоходовБУ2;
			НоваяСтрока.СубконтоДоходовБУ3 = ТекСтрокаТовары.СубконтоДоходовБУ3;
			НоваяСтрока.СубконтоДоходовНУ1 = ТекСтрокаТовары.СубконтоДоходовНУ1;
			НоваяСтрока.СубконтоДоходовНУ2 = ТекСтрокаТовары.СубконтоДоходовНУ2;
			НоваяСтрока.СубконтоДоходовНУ3 = ТекСтрокаТовары.СубконтоДоходовНУ3;
			НоваяСтрока.СубконтоСписанияСебестоимостиБУ1 = ТекСтрокаТовары.СубконтоСписанияСебестоимостиБУ1;
			НоваяСтрока.СубконтоСписанияСебестоимостиБУ2 = ТекСтрокаТовары.СубконтоСписанияСебестоимостиБУ2;
			НоваяСтрока.СубконтоСписанияСебестоимостиБУ3 = ТекСтрокаТовары.СубконтоСписанияСебестоимостиБУ3;
			НоваяСтрока.СубконтоСписанияСебестоимостиНУ1 = ТекСтрокаТовары.СубконтоСписанияСебестоимостиНУ1;
			НоваяСтрока.СубконтоСписанияСебестоимостиНУ2 = ТекСтрокаТовары.СубконтоСписанияСебестоимостиНУ2;
			НоваяСтрока.СубконтоСписанияСебестоимостиНУ3 = ТекСтрокаТовары.СубконтоСписанияСебестоимостиНУ3;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаАкциза = ТекСтрокаТовары.СуммаАкциза;
			НоваяСтрока.СуммаНДС = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.СчетДоходовБУ = ТекСтрокаТовары.СчетДоходовБУ;
			НоваяСтрока.СчетДоходовНУ = ТекСтрокаТовары.СчетДоходовНУ;
			НоваяСтрока.СчетСписанияСебестоимостиБУ = ТекСтрокаТовары.СчетСписанияСебестоимостиБУ;
			НоваяСтрока.СчетСписанияСебестоимостиНУ = ТекСтрокаТовары.СчетСписанияСебестоимостиНУ;
			НоваяСтрока.СчетУчетаАкцизаПоРеализации = ТекСтрокаТовары.СчетУчетаАкцизаПоРеализации;
			НоваяСтрока.СчетУчетаБУ = ТекСтрокаТовары.СчетУчетаБУ;
			НоваяСтрока.СчетУчетаНДСПоРеализации = ТекСтрокаТовары.СчетУчетаНДСПоРеализации;
			НоваяСтрока.СчетУчетаНУ = ТекСтрокаТовары.СчетУчетаНУ;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = СоздатьДокумент.Услуги.Добавить();
			НоваяСтрока.Количество = ТекСтрокаУслуги.Количество;
			НоваяСтрока.НДСВидОперацииРеализации = ТекСтрокаУслуги.НДСВидОперацииРеализации;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.СубконтоДоходовБУ1 = ТекСтрокаУслуги.СубконтоДоходовБУ1;
			НоваяСтрока.СубконтоДоходовБУ2 = ТекСтрокаУслуги.СубконтоДоходовБУ2;
			НоваяСтрока.СубконтоДоходовБУ3 = ТекСтрокаУслуги.СубконтоДоходовБУ3;
			НоваяСтрока.СубконтоДоходовНУ1 = ТекСтрокаУслуги.СубконтоДоходовНУ1;
			НоваяСтрока.СубконтоДоходовНУ2 = ТекСтрокаУслуги.СубконтоДоходовНУ2;
			НоваяСтрока.СубконтоДоходовНУ3 = ТекСтрокаУслуги.СубконтоДоходовНУ3;
			НоваяСтрока.Сумма = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.СчетДоходовБУ = ТекСтрокаУслуги.СчетДоходовБУ;
			НоваяСтрока.СчетДоходовНУ = ТекСтрокаУслуги.СчетДоходовНУ;
			НоваяСтрока.СчетУчетаНДСПоРеализации = ТекСтрокаУслуги.СчетУчетаНДСПоРеализации;
			НоваяСтрока.Цена = ТекСтрокаУслуги.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаУчастникиСовместнойДеятельности Из ДанныеЗаполнения.УчастникиСовместнойДеятельности Цикл
			НоваяСтрока = СоздатьДокумент.УчастникиСовместнойДеятельности.Добавить();
			НоваяСтрока.ДоляУчастия = ТекСтрокаУчастникиСовместнойДеятельности.ДоляУчастия;
			НоваяСтрока.УчастникСовместнойДеятельности = ТекСтрокаУчастникиСовместнойДеятельности.УчастникСовместнойДеятельности;
		КонецЦикла;
		СоздатьДокумент.Записать(РежимЗаписиДокумента.Запись,);
		
		Если ПризнакОткрытияДокумента = Истина Тогда
		//СоздатьДокумент.ПолучитьФорму().Открыть();		
	    КонецЕсли;
	    КонецЕсли;

		Возврат СоздатьДокумент.Ссылка;
		
КонецФункции // ОбработкаЗаполнения()

&НаСервере
Процедура dm_ПоискДокументаРеализацияТоваровИУслугПоЗаявкеПокупателя(Поиск_РТУ_на_основании_ЗП)Экспорт
	
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.dm_ДокументОснованиеЗаявкаПокупателя,
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.Проведен,
		|	РеализацияТоваровУслуг.Контрагент,
		|	РеализацияТоваровУслуг.ДоговорКонтрагента,
		|	РеализацияТоваровУслуг.Склад,
		|	РеализацияТоваровУслуг.СуммаДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.dm_ДокументОснованиеЗаявкаПокупателя = &Поиск_РТУ_на_основании_ЗП
		|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Поиск_РТУ_на_основании_ЗП", Поиск_РТУ_на_основании_ЗП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() <> 0 Тогда
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НоваяСтрока = Объект.ТабЧастьДокументы.Добавить();
	
	НоваяСтрока.ЗП_ДоговорКонтрагента = ВыборкаДетальныеЗаписи.ДоговорКонтрагента;
	НоваяСтрока.ЗП_Документ = ВыборкаДетальныеЗаписи.Ссылка;
	НоваяСтрока.ЗП_Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
	НоваяСтрока.ЗП_Проведение = ВыборкаДетальныеЗаписи.Проведен;
	НоваяСтрока.ЗП_Склад = ВыборкаДетальныеЗаписи.Склад;
	НоваяСтрока.ЗП_Статус = ВыборкаДетальныеЗаписи.Ссылка.dm_СтатусДокументаXMLЗаявкиРеализация;
	НоваяСтрока.ЗП_СуммаДокумента = ВыборкаДетальныеЗаписи.СуммаДокумента;
	
	КонецЦикла;
	
	Иначе
	Сообщить("Созданных документов (Реализации товаров и услуг) на основании данного документа не найдено! Проверте привязку документа (Заявка покупателя) в документе (Реализация товаров и услуг)!",СтатусСообщения.Внимание);
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура dm_ЗП_Обновить(Команда)
	
	Поиск_РТУ_на_основании_ЗП = Объект.Ссылка;
	
	Объект.ТабЧастьДокументы.Очистить();
	
	dm_ПоискДокументаРеализацияТоваровИУслугПоЗаявкеПокупателя(Поиск_РТУ_на_основании_ЗП);

КонецПроцедуры

&НаКлиенте
Процедура dm_СоздатьНовыйДокумент_РеализацияТоваровИУслуг(Команда)
	
	ПризнакОткрытияДокумента = Ложь;
	Режим = РежимДиалогаВопрос.ДаНет;
    Текст = "ru = ""После создания документа открыть документ?""";
    Ответ = Вопрос(НСтр(Текст), Режим, 0);
    Если Ответ = КодВозвратаДиалога.Нет Тогда
    ПризнакОткрытияДокумента = Ложь;
    КонецЕсли;
    Если Ответ = КодВозвратаДиалога.Да Тогда
    ПризнакОткрытияДокумента = Истина;
    КонецЕсли;

	
	Основание = Объект.Ссылка;
	СоздатьДокумент = dm_СозданиеРеализацииНаОснованииЗаявкиПокупателя(Основание,ПризнакОткрытияДокумента);
	
	ОткрытьЗначение(СоздатьДокумент);

	

	
	Поиск_РТУ_на_основании_ЗП = Объект.Ссылка;
	
	Объект.ТабЧастьДокументы.Очистить();
	
	dm_ПоискДокументаРеализацияТоваровИУслугПоЗаявкеПокупателя(Поиск_РТУ_на_основании_ЗП);
	
КонецПроцедуры
//---- DANIL 25.04.2019

//**** DANIL 26.04.2019
//Позвояет сравнить файл xml с табличной формой документа товары
&НаКлиенте
Процедура dm_СравнениеЗаявкиИXML(Команда)
	
	ТабДок = dm_СравнениеЗаявкиИXMLНаСервере();
	
	ТабДок.Показать();

	//ТаблицаЗаявкаФайл = dm_ТаблицаЗаявкаФайл();
	//

	//НайденныеФайлы = Неопределено;
	//
	//Если Объект.Правило <> dm_СтрокаПеречисленияМетро() И Объект.Правило <> dm_СтрокаПеречисленияМагнум() Тогда 
	//	Сообщить("Правило в документе неуказано!",СтатусСообщения.ОченьВажное);
	//Иначе
	//Если Объект.Правило = dm_СтрокаПеречисленияМетро() Тогда 
	////Если ВыборРежимаЗагрузкиМетро = Истина Тогда	
	//Каталог = "\\169.254.1.1\common\1С_bases\xml_obmen\ftp_Domplast83\Метро\inbox\"+Объект.УникальныйНомерЗаявкиПокупателяXML;
	////КонецЕсли;
	//КонецЕсли;
	//
	//Если Объект.Правило = dm_СтрокаПеречисленияМагнум() Тогда
	////Если ВыборРежимаЗагрузкиМагнум = Истина Тогда	
	//Каталог = "\\169.254.1.1\common\1С_bases\xml_obmen\ftp_Domplast83\Магнум\inbox\"+Объект.УникальныйНомерЗаявкиПокупателяXML;
	////КонецЕсли;
	//КонецЕсли;
	//
	//Маска = Неопределено;
	//СписокЗагружаемыхФайловXML = Неопределено;
	//
	////Если ВыборРежимаЗагрузкиМетро = Ложь И ВыборРежимаЗагрузкиМагнум = Ложь Тогда
	////Предупреждение("Выберете режим загрузки данных!",5,"Предупреждение!");
	////Возврат;
	////КонецЕсли;

	//НайтиФайлыПоПодпапкам(НайденныеФайлы, Каталог, Маска, СписокЗагружаемыхФайловXML);
	//Если СписокЗагружаемыхФайловXML <> Неопределено Тогда
	//	
	//	
	//Для каждого Стр Из СписокЗагружаемыхФайловXML Цикл
	//
	//Загрузка_ИмяФайла = Стр.Имя;	
	//Загрузка_ПутьФайлаДляЗагрузки = Стр.ПолноеИмя;
	//
	//	
	//
	//ЧтениеXML(дзXML);
	//
	////Если ВыборРежимаЗагрузкиМетро = Ложь И ВыборРежимаЗагрузкиМагнум = Ложь Тогда
	////Предупреждение("Выберете режим загрузки данных!",5,"Предупреждение!");
	////КонецЕсли;

	//
	//Если Объект.Правило = dm_СтрокаПеречисленияМетро() Тогда
	////Если ВыборРежимаЗагрузкиМетро = Истина Тогда
	//Сообщить("Выбран режим загрузки МЕТРО!",СтатусСообщения.Информация);
	//ПреобразованиеИзДереваМЕТРО(дзXML,ТаблицаЗаявкаФайл);	
	//
	//ПечатьСравнениеПечатьИФайл(ТаблицаЗаявкаФайл);
	//
	//
	////КонецЕсли;	
	//КонецЕсли;
	//
	//Если Объект.Правило = dm_СтрокаПеречисленияМагнум() Тогда
	////Если ВыборРежимаЗагрузкиМагнум = Истина Тогда
	//Сообщить("Выбран режим загрузки МАГНУМ!",СтатусСообщения.Информация);
	//ПреобразованиеИзДереваМАГНУМ(дзXML,ТаблицаЗаявкаФайл);
	//
	//ПечатьСравнениеПечатьИФайл(ТаблицаЗаявкаФайл);
	//
	////КонецЕсли;
	//КонецЕсли;

	//Загрузка_ИмяФайла = "";	
	//Загрузка_ПутьФайлаДляЗагрузки = "";

	//КонецЦикла;	


	//Иначе
	//Сообщить("Файлы для загрузки не найдены!",СтатусСообщения.ОченьВажное);
	//КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция dm_СравнениеЗаявкиИXMLНаСервере()
	
    ТаблицаЗаявкаФайл = dm_ТаблицаЗаявкаФайл();
	

	НайденныеФайлы = Неопределено;
	
	Если Объект.Правило <> dm_СтрокаПеречисленияМетро() И Объект.Правило <> dm_СтрокаПеречисленияМагнум() Тогда 
		Сообщить("Правило в документе неуказано!",СтатусСообщения.ОченьВажное);
	Иначе
	Если Объект.Правило = dm_СтрокаПеречисленияМетро() Тогда 
	//Если ВыборРежимаЗагрузкиМетро = Истина Тогда	
	Каталог = "\\SERVER\common\1С_bases\xml_obmen\ftp_Domplast83\Метро\inbox\"+Объект.УникальныйНомерЗаявкиПокупателяXML;
	//КонецЕсли;
	КонецЕсли;
	
	Если Объект.Правило = dm_СтрокаПеречисленияМагнум() Тогда
	//Если ВыборРежимаЗагрузкиМагнум = Истина Тогда	
	// \\SERVER
	//  \\169.254.1.1
	Каталог = "\\SERVER\common\1С_bases\xml_obmen\ftp_Domplast83\Магнум\inbox\"+Объект.УникальныйНомерЗаявкиПокупателяXML;
	//КонецЕсли;
    КонецЕсли;
	
	Маска = Неопределено;
	СписокЗагружаемыхФайловXML = Неопределено;
	
	//Если ВыборРежимаЗагрузкиМетро = Ложь И ВыборРежимаЗагрузкиМагнум = Ложь Тогда
	//Предупреждение("Выберете режим загрузки данных!",5,"Предупреждение!");
	//Возврат;
	//КонецЕсли;

	НайтиФайлыПоПодпапкам(НайденныеФайлы, Каталог, Маска, СписокЗагружаемыхФайловXML);
	Если СписокЗагружаемыхФайловXML <> Неопределено Тогда
		
		
	Для каждого Стр Из СписокЗагружаемыхФайловXML Цикл
	
	Загрузка_ИмяФайла = Стр.Имя;	
	Загрузка_ПутьФайлаДляЗагрузки = Стр.ПолноеИмя;
	
		
	
	ЧтениеXML(дзXML);
	
	//Если ВыборРежимаЗагрузкиМетро = Ложь И ВыборРежимаЗагрузкиМагнум = Ложь Тогда
	//Предупреждение("Выберете режим загрузки данных!",5,"Предупреждение!");
	//КонецЕсли;

	
	Если Объект.Правило = dm_СтрокаПеречисленияМетро() Тогда
	//Если ВыборРежимаЗагрузкиМетро = Истина Тогда
	Сообщить("Выбран режим загрузки МЕТРО!",СтатусСообщения.Информация);
	ПреобразованиеИзДереваМЕТРО(дзXML,ТаблицаЗаявкаФайл);	
	
	ТабДок = ПечатьСравнениеПечатьИФайл(ТаблицаЗаявкаФайл);
	
	
    //КонецЕсли;	
    КонецЕсли;
	
	Если Объект.Правило = dm_СтрокаПеречисленияМагнум() Тогда
	//Если ВыборРежимаЗагрузкиМагнум = Истина Тогда
	Сообщить("Выбран режим загрузки МАГНУМ!",СтатусСообщения.Информация);
	ПреобразованиеИзДереваМАГНУМ(дзXML,ТаблицаЗаявкаФайл);
	
	ТабДок = ПечатьСравнениеПечатьИФайл(ТаблицаЗаявкаФайл);
	
    //КонецЕсли;
    КонецЕсли;

    Загрузка_ИмяФайла = "";	
	Загрузка_ПутьФайлаДляЗагрузки = "";

    КонецЦикла;	


    Иначе
	Сообщить("Файлы для загрузки не найдены!",СтатусСообщения.ОченьВажное);
    КонецЕсли;
    КонецЕсли;

	Возврат ТабДок; 
	
КонецФункции
	
&НаСервере
Функция dm_ТаблицаЗаявкаФайл()
	ТаблицаЗаявкаФайл = Новый ТаблицаЗначений;
	ТаблицаЗаявкаФайл.Колонки.Добавить("Код");
	ТаблицаЗаявкаФайл.Колонки.Добавить("Наименование");
	ТаблицаЗаявкаФайл.Колонки.Добавить("Штрихкод");
	ТаблицаЗаявкаФайл.Колонки.Добавить("Количество");
	ТаблицаЗаявкаФайл.Колонки.Добавить("Цена");
	ТаблицаЗаявкаФайл.Колонки.Добавить("Сумма");
	 	
    Возврат ТаблицаЗаявкаФайл;
	
КонецФункции

&НаСервере
Функция dm_СтрокаПеречисленияМетро()
    СтрокаПеречисления = Перечисления.dm_ПравилоXML.Метро;
    Возврат СтрокаПеречисления;
КонецФункции

&НаСервере
Функция dm_СтрокаПеречисленияМагнум()
    СтрокаПеречисления = Перечисления.dm_ПравилоXML.Магнум;
    Возврат СтрокаПеречисления;
КонецФункции


//Начала*************( Считывание и чтение файла XML )*********************************************************************************************
&НаСервере
Процедура ЧтениеXML(дзXML)

//открываем файл XML 1С на чтение с помощью ЧтениеXML 1С
Файл = Новый ЧтениеXML();
Файл.ОткрытьФайл(Загрузка_ПутьФайлаДляЗагрузки);
//Файл.ОткрытьФайл("D:\xml_obmen\ftp_Domplast\4870212400013.ORDERS.OUT.20160301191424218.29c6fafc-1bb8-42c9-88a5-ea03ef3bc7b0.xml");//Метро
//Файл.ОткрытьФайл("D:\xml_obmen\Магнум_XML\order_20160219184200_10279251.xml");//Магнум

//подготовим дерево значений
//у каждой ветки XML может быть наименование, атрибуты и значение
дзXML = Новый ДеревоЗначений();
дзXML.Колонки.Добавить("Наименование");
дзXML.Колонки.Добавить("Значение");
дзXML.Колонки.Добавить("Атрибуты");
//так как атрибутов у строки XML может быть несколько - будем записывать их в таблицу значений
//каждый атрибут имеет имя и значение
тАтрибутов = Новый ТаблицаЗначений();
тАтрибутов.Колонки.Добавить("Имя");
тАтрибутов.Колонки.Добавить("Значение");
//уровень вложенности поможет нам понимать когда требуется добавить вложенную ветку, а когда нужно вернуться на уровень вверх
УровеньВложенности = 0;
//текущая строка - строка дерева, будет меняться при увеличении вложенности
ТекущаяСтрока = Неопределено;
//чтение файла XML 1С производится не построчно, а по структуре, при окончании файла чтение вернет  ЛОЖЬ
Пока Файл.Прочитать() Цикл

//нас интересуют три вида узлов - начало элемента, текст (значение элемента) и конец элемента (чтобы вернуться на уровень вверх)
Если Файл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
//в начале элемента увеличиваем уровень вложенности, в конце элемента уменьшаем
УровеньВложенности = УровеньВложенности + 1;

//если это первая строка, то добавим ее в самый верх дерева и сохраним только наименование
Если ТекущаяСтрока = Неопределено Тогда
ТекущаяСтрока = дзXML.Строки.Добавить();
ТекущаяСтрока.Наименование = Файл.Имя;
Продолжить;
Иначе
//вложенные строки
ТекущаяСтрока = ТекущаяСтрока.Строки.Добавить();
ТекущаяСтрока.Наименование = Файл.Имя; //сохраним наименование

//есть ли у этого элемента XML атрибуты?
Если Файл.КоличествоАтрибутов() > 0 Тогда
//если да - скопируем подготовленную пустую таблицу для сохранения атрибутов
тАтрибутыУзла = тАтрибутов.Скопировать();
//цикл по количеству атрибутов у этого элемента
Для Сч = 0 по Файл.КоличествоАтрибутов()-1 Цикл
//для каждого атрибута запомним имя и значение
Строка = тАтрибутыУзла.Добавить();
Строка.Имя = Файл.ИмяАтрибута(Сч);
Строка.Значение = Файл.ЗначениеАтрибута(Сч);
КонецЦикла;
//сохраним таблицу атрибутов элемента в текущую строку
ТекущаяСтрока.Атрибуты = тАтрибутыУзла;
КонецЕсли;
КонецЕсли;
ИначеЕсли Файл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
//в начале элемента увеличиваем уровень вложенности, в конце элемента уменьшаем
УровеньВложенности = УровеньВложенности - 1;
//возвращаем текущую строку на уровень вверх
ТекущаяСтрока = ТекущаяСтрока.Родитель;

ИначеЕсли Файл.ТипУзла = ТипУзлаXML.Текст Тогда
//если у элемента есть значение - просто сохраним его
ТекущаяСтрока.Значение = Файл.Значение;
КонецЕсли;
КонецЦикла;
Файл.Закрыть();

	
КонецПроцедуры
//Конец--------------( Считывание и чтение файла XML )---------------------------------------------------------------------------------------------

&НаСервере
Процедура НайтиФайлыПоПодпапкам(НайденныеФайлы, Каталог, Маска,СписокЗагружаемыхФайловXML)
    Если НайденныеФайлы = Неопределено Тогда
        НайденныеФайлы = Новый Массив;
    КонецЕсли;
    Путь = Каталог;
    МассивФайлов = НайтиФайлы(Путь, Маска);
    Для Каждого НайденныйФайл Из МассивФайлов Цикл
        НайденныеФайлы.Добавить(НайденныйФайл); 
    КонецЦикла;
    МассивКаталогов = НайтиФайлы(Путь, "*");
	СписокЗагружаемыхФайловXML = МассивФайлов;
    Для Каждого Папка Из МассивКаталогов Цикл
        Попытка
            Если Папка.ЭтоКаталог() Тогда
                НайтиФайлыПоПодпапкам(НайденныеФайлы, Папка.ПолноеИмя, Маска, СписокЗагружаемыхФайловXML);        
            КонецЕсли;
        Исключение
            Сообщить(ОписаниеОшибки());
        КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры 

//Начала***************( МЕТРО Процедуры и Функции для работы по загрузке данных XML )************************************************************** 
&НаСервере
Процедура ПреобразованиеИзДереваМЕТРО(дзXML,ТаблицаЗаявкаФайл)
	

	
	
	Дерево = дзXML;
	Сообщить("----------Файл----------");
	Для каждого Стр Из Дерево.Строки Цикл //Группа		
    Группа = Стр.Строки.Количество();
		
	
	//---------------------------------------------------------------------
	ЗначениеКонтрагент_BUYER_GLN = Неопределено;
	//---------------------------------------------------------------------
	
    НашаСтрока = СокрЛП(Стр.Наименование); 
    ПозицияСлеша=Найти(НашаСтрока,":"); 
    СтрокаДо =Лев(НашаСтрока,ПозицияСлеша-1); 
    СтрокаПосле = Сред(НашаСтрока,ПозицияСлеша+1,СтрДлина(НашаСтрока));

	//---------------------------------------------------------------------
//	ЭлементыФормы.Схема.Заголовок = "Схема: "+СтрокаПосле;
    //---------------------------------------------------------------------		
	Если Объект.dm_Программист1С = Истина Тогда
	Сообщить("Группа|"+"Наименование:"+Стр.Наименование+"|Значение:"+Стр.Значение);
	КонецЕсли;
    Если Группа > 0 Тогда //Проверка группы
	
	Для каждого Стр1 Из Стр.Строки Цикл	//Группа1		
	Группа1 = Стр1.Строки.Количество();
	
	//---------------------------------------------------------------------
	//---------------------------------------------------------------------
	ЗначениеQUANTITY = 0;
	ЗначениеNET_PRICE = 0;
	ЗначениеGTIN = Неопределено;
	ЗначениеBUYER_ART_NO = Неопределено;
	ЗначениеНоменклатурыПодсистема_BUYER_ART_NO = Неопределено;
	ЗначениеНоменклатурыШтрихКод_GTIN = Неопределено;
	ЗначениеНомерЗаказа_ORDER_NO = Неопределено;
	ЗначениеДатаЗаявки_ORDER_DATE = '000101010000';
	ЗначениеДатаОтгрузки_PLANNED_DATE = '000101010000';
	ЗначениеОрганизация_SUPPLIER_GLN = Неопределено;
	ЗначениеВалюта_CURRENCY = Неопределено;
	ЗначениеSUP_ART_NO = Неопределено;
	
	Если Стр1.Наименование = "ORDER_NO" Тогда // Номер заявки
//	ЭлементыФормы.НомерЗаказа.Заголовок = "Номер заказа: "+Стр1.Значение;

	ЗначениеНомерЗаказа_ORDER_NO = Неопределено;
    КонецЕсли;

	Если Стр1.Наименование = "SUPPLIER_GLN" Тогда //Номер организации
	//ЭлементыФормы.НомерОрганизации.Заголовок = "Номер организации: "+Стр1.Значение;
	
	ЗначениеОрганизация_SUPPLIER_GLN = Неопределено;
    КонецЕсли;

	Если Стр1.Наименование = "BUYER_GLN" Тогда //Номер контрагента
	//ЭлементыФормы.НомерКонтрагента.Заголовок = "Номер контрагента: "+Стр1.Значение;
	
	ЗначениеКонтрагент_BUYER_GLN = Неопределено;
    КонецЕсли;

    Если Стр1.Наименование = "ORDER_DATE" Тогда //Дата заявки
	//ЭлементыФормы.ДатаЗаявки.Заголовок = "Дата заявки: "+Стр1.Значение;

	ЗначениеДатаЗаявки_ORDER_DATE = Неопределено;
    КонецЕсли;

	Если Стр1.Наименование = "PLANNED_DATE" Тогда //Дата отгрузки
	//ЭлементыФормы.ДатаОтгрузки.Заголовок = "Дата отгрузки: "+Стр1.Значение;	
	
	ЗначениеДатаОтгрузки_PLANNED_DATE = Неопределено;
	
    КонецЕсли;

	Если Стр1.Наименование = "CURRENCY" Тогда //Валюта
	//ЭлементыФормы.Валюта.Заголовок = "Валюта: "+Стр1.Значение;
	
	ЗначениеВалюта_CURRENCY = Неопределено;
    КонецЕсли;

	//---------------------------------------------------------------------
	Если Объект.dm_Программист1С = Истина Тогда
	Сообщить("Группа1|"+"Наименование:"+Стр1.Наименование+"|Значение:"+Стр1.Значение);
    КонецЕсли;
	Если Группа1 > 0 Тогда//Проверка группы1
		
				
		Если Объект.dm_СтатусДокументаXMLЗаявкиРеализация = Ложь Тогда
		Возврат;
		КонецЕсли;
		
	Для каждого Стр2 Из Стр1.Строки Цикл//Группа2
		
	//---------------------------------------------------------------------
	Если Стр2.Наименование = "GTIN" Тогда //Штрихкод
		ЗначениеGTIN = Стр2.Значение;
	КонецЕсли;
	
	Если Стр2.Наименование = "BUYER_ART_NO" Тогда
		ЗначениеBUYER_ART_NO = Стр2.Значение;
	КонецЕсли;
	
	Если Стр2.Наименование = "QUANTITY" Тогда
		ЗначениеQUANTITY = Стр2.Значение;
	КонецЕсли;

	Если Стр2.Наименование = "NET_PRICE" Тогда
		ЗначениеNET_PRICE = Стр2.Значение;
	КонецЕсли;

	Если Стр2.Наименование = "SUP_ART_NO" Тогда
		ЗначениеSUP_ART_NO = Стр2.Значение;
	КонецЕсли;
	
	Если Стр2.Наименование = "ITEM_DESCR" Тогда
		ЗначениеITEM_DESCR = Стр2.Значение;
	КонецЕсли;

	//---------------------------------------------------------------------
	Если Объект.dm_Программист1С = Истина Тогда	
	Сообщить("Группа2|"+"Наименование:"+Стр2.Наименование+"|Значение:"+Стр2.Значение);	
	КонецЕсли;
	КонецЦикла;// - Группа2
	
    КонецЕсли;// - Проверка группы1
    //---------------------------------------------------------------------
	//Если ЗначениеНоменклатурыПодсистема_BUYER_ART_NO <> Неопределено 
	//	ИЛИ ЗначениеBUYER_ART_NO <> Неопределено 
	//	ИЛИ ЗначениеНоменклатурыШтрихКод_GTIN <> Неопределено
	//	ИЛИ ЗначениеGTIN <> Неопределено Тогда

	ЗначениеНоменклатурыПодсистема_BUYER_ART_NO = ЗначениеBUYER_ART_NO;
	ЗначениеНоменклатурыШтрихКод_GTIN = ЗначениеGTIN;
	ЗначениеНоменклатурыКод = ЗначениеSUP_ART_NO;
	
	
		//НоваяСтрТаб._Количество = ЗначениеQUANTITY;	
		//НоваяСтрТаб._Цена = ЗначениеNET_PRICE;
		
	СтрТЗ = ТаблицаЗаявкаФайл.Добавить();
    СтрТЗ.Код = ЗначениеНоменклатурыКод;	
	СтрТЗ.Наименование = ЗначениеITEM_DESCR;
	СтрТЗ.Штрихкод = ЗначениеНоменклатурыШтрихКод_GTIN;
	СтрТЗ.Количество = ЗначениеQUANTITY;
	СтрТЗ.Цена = ЗначениеNET_PRICE;
	СтрТЗ.Сумма = ЗначениеQUANTITY*ЗначениеNET_PRICE;
	
		
	//КонецЕсли;
	
	ЗначениеQUANTITY = 0;
	ЗначениеNET_PRICE = 0;
	ЗначениеGTIN = Неопределено;
	ЗначениеBUYER_ART_NO = Неопределено;
	ЗначениеНоменклатурыПодсистема_BUYER_ART_NO = Неопределено;
	ЗначениеНоменклатурыШтрихКод_GTIN = Неопределено;
	ЗначениеITEM_DESCR = Неопределено;
	
	//---------------------------------------------------------------------
    КонецЦикла;// - Группа1

КонецЕсли;// - Проверка группы
       Сообщить("----------Конец файла----------");
	   
	
	         	   	   
	ПоискГодЗаявки = Неопределено;
	ПоискНомераЗаявкиПокупателя = '000101010000';
	КонецЦикла; // - Группа

	а = 0;
КонецПроцедуры

//Начала***************( МАГНУМ Процедуры и Функции для работы по загрузке данных XML )**************************************************************
&НаСервере
Процедура ПреобразованиеИзДереваМАГНУМ(дзXML,ТаблицаЗаявкаФайл)
	
	
	
	Дерево = дзXML;
	Сообщить("----------Файл----------");
	
		СтатусПроверкиДокументаНаСоздание = Ложь;
	ПоискГодЗаявки = '000101010000';
	ПоискНомераЗаявкиПокупателя = Неопределено;
	

	Для каждого Стр Из Дерево.Строки Цикл //Группа		
    Группа = Стр.Строки.Количество();
	

	
	Если Объект.dm_Программист1С = Истина Тогда
	Сообщить("Группа|"+"Наименование:"+Стр.Наименование+"|Значение:"+Стр.Значение);
	КонецЕсли;
    Если Группа > 0 Тогда //Проверка группы
	
	Для каждого Стр1 Из Стр.Строки Цикл	//Группа1		
	Группа1 = Стр1.Строки.Количество();
	
	 ЗначениеОрганизация_SUPPLIER_GLN = Неопределено;
	Значение_BUYER_GLN = Неопределено;//Контрагент

	Значение_ORDEREDQUANTITY = 0;//Количество
	Значение_ORDERPRICE = 0; // Цена
		Значение_DELIVERYPLACE = Неопределено;//Место поставки (Контрагент)
	ЗначениеНоменклатурыПодсистема_PRODUCTIDBUYER = Неопределено;//ХЗ
	ЗначениеНоменклатурыШтрихКод_PRODUCT = Неопределено;
	ЗначениеНомерЗаказа_NUMBER = Неопределено; 
	ЗначениеДатаЗаявки_DATE = '000101010000';
	ЗначениеДатаОтгрузки_DELIVERYDATE = '000101010000';
		ЗначениеВалюта_CURRENCY = Неопределено;
    ЗначениеSUP_ART_NO = Неопределено;
	
	Если СокрЛП(Стр1.Наименование) = "NUMBER" Тогда //Номер заявки
		ЗначениеНомерЗаказа_NUMBER = Стр1.Значение; 
		ПоискНомераЗаявкиПокупателя = ЗначениеНомерЗаказа_NUMBER;
	

		ЗначениеНомерЗаказа_NUMBER = Неопределено;
	КонецЕсли;
	
	Если СокрЛП(Стр1.Наименование) = "DATE" Тогда //Дата заявки	
	ЗначениеДатаЗаявки_DATE = Дата(СтрЗаменить(Стр1.Значение,"-",""));
	
	ПоискГодЗаявки = ЗначениеДатаЗаявки_DATE;

	ЗначениеДатаЗаявки_DATE = Неопределено;
	КонецЕсли;
	
	Если СокрЛП(Стр1.Наименование) = "DELIVERYDATE" Тогда //Дата отгрузки	
	ЗначениеДатаОтгрузки_DELIVERYDATE = Дата(СтрЗаменить(Стр1.Значение,"-",""));
	ЗначениеДатаОтгрузки_DELIVERYDATE = Неопределено;
    КонецЕсли;

	Если Стр1.Наименование = "CURRENCY" Тогда //Валюта
		ЗначениеВалюта_CURRENCY = Стр1.Значение;
	
	ЗначениеВалюта_CURRENCY = Неопределено;
    КонецЕсли;


	Если Объект.dm_Программист1С = Истина Тогда
	Сообщить("Группа1|"+"Наименование:"+Стр1.Наименование+"|Значение:"+Стр1.Значение);
    КонецЕсли;
	Если Группа1 > 0 Тогда//Проверка группы1
		
	Для каждого Стр2 Из Стр1.Строки Цикл//Группа2
	Группа2 = Стр2.Строки.Количество();
	
	Если Стр2.Наименование = "BUYER" Тогда //Контрагент
	//ЭлементыФормы.НомерОрганизации.Заголовок = "Номер организации: "+Стр1.Значение;
	
	ЗначениеКонтрагент_BUYER_GLN = Стр2.Значение;
	
		Значение_BUYER_GLN = Неопределено;
    КонецЕсли;

	Если Стр2.Наименование = "DELIVERYPLACE" Тогда //Место поставки
	//ЭлементыФормы.НомерОрганизации.Заголовок = "Номер организации: "+Стр1.Значение;
	Значение_DELIVERYPLACE = Стр2.Значение;
	//ПоискОрганизация_SUPPLIER_GLN_Магнум(СсылкаОрганизация,ЗначениеОрганизация_SUPPLIER_GLN);
	//ЭлементыФормы._НомерОрганизации.Значение = СсылкаОрганизация;
	//НовыйДокумент.Организация = СсылкаОрганизация;//Создание документа
	Значение_DELIVERYPLACE = Неопределено;
    КонецЕсли;
	
	
    Если Стр2.Наименование = "SUPPLIER" Тогда //Наша организация
		ЗначениеОрганизация_SUPPLIER_GLN = Стр2.Значение;
		ЗначениеОрганизация_SUPPLIER_GLN = Неопределено;
    КонецЕсли;
	Если Объект.dm_Программист1С = Истина Тогда
	Сообщить("Группа2|"+"Наименование:"+Стр2.Наименование+"|Значение:"+Стр2.Значение);	
	КонецЕсли;
	Если Группа2 > 0 Тогда//Проверка группы2
		
				
		//Если СтатусПроверкиДокументаНаСоздание = Ложь Тогда
		//Возврат;
		//КонецЕсли;

	Для каждого Стр3 Из Стр2.Строки Цикл//Группа3
	Группа3 = Стр3.Строки.Количество();
	
	
	
	
	Если Стр3.Наименование = "ORDEREDQUANTITY" Тогда
		Значение_ORDEREDQUANTITY = Стр3.Значение;//Количество
	КонецЕсли;
	
	Если Стр3.Наименование = "ORDERPRICE" Тогда
		Значение_ORDERPRICE = Стр3.Значение; // Цена
	КонецЕсли;
	
	Если Стр3.Наименование = "PRODUCTIDBUYER" Тогда
		ЗначениеНоменклатурыПодсистема_PRODUCTIDBUYER = Стр3.Значение;
	КонецЕсли;

	Если Стр3.Наименование = "PRODUCT" Тогда //Штрихкод
		ЗначениеНоменклатурыШтрихКод_PRODUCT = Стр3.Значение;
	КонецЕсли;

	Если Объект.dm_Программист1С = Истина Тогда
	Сообщить("Группа3|"+"Наименование:"+Стр3.Наименование+"|Значение:"+Стр3.Значение);	
	КонецЕсли;
	Если Группа3 > 0 Тогда//Проверка группы3
	Для каждого Стр4 Из Стр3.Строки Цикл//Группа4
	Группа4 = Стр4.Строки.Количество();
	НаименованиеНоменклатуры = Стр4.Значение;
	Если Объект.dm_Программист1С = Истина Тогда
	Сообщить("Группа4|"+"Наименование:"+Стр4.Наименование+"|Значение:"+Стр4.Значение);	
	КонецЕсли;
    КонецЦикла;// - Группа4

	 //-------------------------------------------------------------------------------------------------------
	//Если ЗначениеНоменклатурыПодсистема_PRODUCTIDBUYER <> Неопределено  
	//	ИЛИ ЗначениеНоменклатурыШтрихКод_PRODUCT <> Неопределено Тогда

	ЗначениеНоменклатурыПодсистема_BUYER_ART_NO = ЗначениеНоменклатурыПодсистема_PRODUCTIDBUYER;
	ЗначениеНоменклатурыШтрихКод_GTIN = ЗначениеНоменклатурыШтрихКод_PRODUCT;
	ЗначениеНоменклатурыКод = ЗначениеSUP_ART_NO;
	

		//НовыйТовар.Количество = Значение_ORDEREDQUANTITY;	
		//НовыйТовар.Цена = Значение_ORDERPRICE;
		//НовыйТовар.Сумма = Значение_ORDEREDQUANTITY*Значение_ORDERPRICE;
	СтрТЗ = ТаблицаЗаявкаФайл.Добавить();
    СтрТЗ.Код = "";	
	СтрТЗ.Наименование = НаименованиеНоменклатуры;
	СтрТЗ.Штрихкод = ЗначениеНоменклатурыШтрихКод_GTIN;
	СтрТЗ.Количество = Значение_ORDEREDQUANTITY;
	СтрТЗ.Цена = Значение_ORDERPRICE;
	СтрТЗ.Сумма = Значение_ORDEREDQUANTITY*Значение_ORDERPRICE;
			
	ЗначениеQUANTITY = 0;
	ЗначениеNET_PRICE = 0;
	ЗначениеGTIN = Неопределено;
	ЗначениеBUYER_ART_NO = Неопределено;
	ЗначениеНоменклатурыПодсистема_BUYER_ART_NO = Неопределено;
	ЗначениеНоменклатурыШтрихКод_GTIN = Неопределено;
	НаименованиеНоменклатуры = Неопределено;
	
	//КонецЕсли;
	//---------------------------------------------------------------------

	
    КонецЕсли;// - Проверка группы3

   	
    КонецЦикла;// - Группа3

	КонецЕсли;// - Проверка группы2

	КонецЦикла;// - Группа2
	
    КонецЕсли;// - Проверка группы1
	
    КонецЦикла;// - Группа1

КонецЕсли;// - Проверка группы
       Сообщить("----------Конец файла----------"); 
	   
	ПоискГодЗаявки = Неопределено;
	ПоискНомераЗаявкиПокупателя = '000101010000';

   КонецЦикла; // - Группа

	
КонецПроцедуры

&НаСервере
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	dm_АдресДоставки = "";
КонецПроцедуры

//Конец-----Отчет по заявке и  xml
&НаСервере
Функция ПечатьСравнениеПечатьИФайл(ТаблицаЗаявкаФайл) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Документы.dm_УдалитьЗаявкаПокупателя.ПолучитьМакет("Макет");
	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	ТабДок.Вывести(Область);
	
	Данные = Макет.ПолучитьОбласть("Данные"); 
Данные.Параметры.Контрагент = Объект.Контрагент; 
Данные.Параметры.Договор = Объект.ДоговорКонтрагента;  
ТабДок.Вывести(Данные); 

Метод = Макет.ПолучитьОбласть("Метод"); 
Метод.Параметры.Значение = "Файл: "+Объект.УникальныйНомерЗаявкиПокупателяXML; 
ТабДок.Вывести(Метод); 

Шапка = Макет.ПолучитьОбласть("Шапка"); 
ТабДок.Вывести(Шапка); 

Строка = Макет.ПолучитьОбласть("Строка"); 

А = 0;
Для каждого СтрТЗ Из ТаблицаЗаявкаФайл Цикл
Если СтрТЗ.Штрихкод <> Неопределено Тогда
	А = А+1;
	Строка.Параметры.Номер = А; 
	Строка.Параметры.Артикул = СтрТЗ.Код; 
	Строка.Параметры.Номенклатура = СтрТЗ.Наименование;
	Строка.Параметры.Штрихкод = СтрТЗ.Штрихкод; 
	Строка.Параметры.Количество = СтрТЗ.Количество; 
	Строка.Параметры.Цена = СтрТЗ.Цена; 
	Строка.Параметры.Сумма = СтрТЗ.Сумма; 
	
ТабДок.Вывести(Строка);
КонецЕсли;

КонецЦикла;




МетодДокумента = Макет.ПолучитьОбласть("МетодДокумента"); 
МетодДокумента.Параметры.Значение = "Документ: "+Объект.Ссылка; 
ТабДок.Вывести(МетодДокумента); 

ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента"); 
ТабДок.Вывести(ШапкаДокумента); 

СтрокаДокумента = Макет.ПолучитьОбласть("СтрокаДокумента"); 


Для каждого СтрТ Из Объект.Товары Цикл

	СтрокаДокумента.Параметры.Номер = СтрТ.НомерСтроки; 
	СтрокаДокумента.Параметры.Артикул = СтрТ.Номенклатура.Код; 
	СтрокаДокумента.Параметры.Номенклатура = СтрТ.Номенклатура;
	СтрокаДокумента.Параметры.Штрихкод = СтрТ.Номенклатура.Артикул; 
	СтрокаДокумента.Параметры.Количество = СтрТ.Количество; 
	СтрокаДокумента.Параметры.Цена = СтрТ.Цена; 
	СтрокаДокумента.Параметры.Сумма = СтрТ.Сумма; 
	
ТабДок.Вывести(СтрокаДокумента);
КонецЦикла;
 
	

	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита = Ложь;
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.ОтображатьЗаголовки = Ложь;
	//ТабДок.Показать();
	
	Возврат ТабДок;
	
КонецФункции

//---- DANIL 26.04.2019

&НаКлиенте
Процедура dm_УникальныйКонтрагент_BUYER_GLN(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Сообщить("Укажите контрагента!",СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	спЗначений = КонтрагентыСписокЗначенийНаСервере(); 	
	Если спЗначений <> Неопределено Тогда
		ВыбранноеЗначение = спЗначений.ВыбратьЭлемент(); //показывает пользователю диалог (см. картинку)
		Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.dm_Контрагент_BUYER_GLN = ВыбранноеЗначение.Значение;
		Объект.dm_Контрагент_BUYER_GLN_Инфо = ВыбранноеЗначение.Представление;
		Иначе
		Объект.dm_Контрагент_BUYER_GLN = "";
		Объект.dm_Контрагент_BUYER_GLN_Инфо = "";
	КонецЕсли;
	Иначе
		ВыбранноеЗначение = "";
		Объект.dm_Контрагент_BUYER_GLN = "";
		Объект.dm_Контрагент_BUYER_GLN_Инфо = "";
	КонецЕсли;
	

	
КонецПроцедуры

&НаСервере
Функция КонтрагентыСписокЗначенийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	chd_ИнформацияЗаявкиПокупателяКонтрагент.Контрагент КАК Контрагент,
	|	chd_ИнформацияЗаявкиПокупателяКонтрагент.BUYER_GLN КАК BUYER_GLN,
	|	chd_ИнформацияЗаявкиПокупателяКонтрагент.УдаленКонтрагенты КАК УдаленКонтрагенты
	|ИЗ
	|	РегистрСведений.chd_ИнформацияЗаявкиПокупателяКонтрагент КАК chd_ИнформацияЗаявкиПокупателяКонтрагент
	|ГДЕ
	|	chd_ИнформацияЗаявкиПокупателяКонтрагент.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		
		спЗначений = Новый СписокЗначений();
		
		Для каждого строкиЗапроса Из РезультатЗапроса Цикл
			
		спЗначений.Добавить(строкиЗапроса.BUYER_GLN, СокрЛП(строкиЗапроса.УдаленКонтрагенты)+" ~ "+СокрЛП(строкиЗапроса.BUYER_GLN)); 	
		
		КонецЦикла;

	Иначе
		
		спЗначений = Неопределено;
		
	КонецЕсли;
	
	Возврат спЗначений;
	
КонецФункции

