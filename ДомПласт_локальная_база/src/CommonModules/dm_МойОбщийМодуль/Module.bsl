//Процедура позволяет заполнять табличную часть документа Реализация товаров и услуг на основании документа Поступления товаров и услуг
Процедура dm_ЗаполнениеДокументаРеализацияНаОснованииПоступленияТабличнаяЧасть(ЭтотОбъект) Экспорт 
	
	Если Строка(ТипЗнч(ЭтотОбъект.ДокументОснование)) <> "Поступление ТМЗ и услуг" Тогда
	Сообщение1 = новый СообщениеПользователю;
	Сообщение1.Текст = "Ошибка заполнения! Укажите документ(Поступление товаров и услуг) и повторите еще раз!";
	Сообщение1.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧастьПослуплениеТоваровИУслуг = ЭтотОбъект.ДокументОснование.Товары;
	ТабличнаяЧастьРеализацияТоваровИУслуг = ЭтотОбъект.Товары;
	
	Для каждого Стр Из ТабличнаяЧастьПослуплениеТоваровИУслуг Цикл
	
	Отбор = Новый Структура;
    Отбор.Вставить("Номенклатура", Стр.Номенклатура);
        
	РезультатПоиска = ТабличнаяЧастьРеализацияТоваровИУслуг.НайтиСтроки(Отбор);	
	
	Для каждого СтрРезультатПоиска Из РезультатПоиска Цикл
	
    СтрРезультатПоиска.Цена = Стр.Цена;
	СтрРезультатПоиска.Сумма = Стр.Сумма;
	СтрРезультатПоиска.СуммаНДС = Стр.СуммаНДС;
	
	СтрРезультатПоиска.СубконтоДоходовБУ1 = Справочники.Доходы.НайтиПоКоду("00.01.001");
	СтрРезультатПоиска.СубконтоДоходовБУ2 = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00000001 ");
	СтрРезультатПоиска.СубконтоДоходовБУ3 = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00000001 ");
	
	СтрРезультатПоиска.СубконтоДоходовНУ1 = Справочники.Доходы.НайтиПоКоду("00.01.001");
	//СтрРезультатПоиска.СубконтоДоходовНУ2
	//СтрРезультатПоиска.СубконтоДоходовНУ3
	
	//СтрРезультатПоиска.СубконтоСписанияСебестоимостиБУ1
	СтрРезультатПоиска.СубконтоСписанияСебестоимостиБУ2 = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00000001 ");
	СтрРезультатПоиска.СубконтоСписанияСебестоимостиБУ3 = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("00000001 ");
	
	//СтрРезультатПоиска.СубконтоСписанияСебестоимостиНУ1
	СтрРезультатПоиска.СубконтоСписанияСебестоимостиНУ2 = Справочники.НоменклатурныеГруппы.НайтиПоКоду("00000001 ");
	//СтрРезультатПоиска.СубконтоСписанияСебестоимостиНУ3
	
    КонецЦикла;

    КонецЦикла;
	
	Сообщить("Произошло заполнение табличной части документа на основании документа (Поступление товаров и услуг)!",СтатусСообщения.Информация);
	Сообщить("Заполнены реквизиты табличной части:",СтатусСообщения.Информация);
	Сообщить("№1 - Цена;",СтатусСообщения.Информация);
	Сообщить("№2 - Сумма;",СтатусСообщения.Информация);
	Сообщить("№3 - СуммаНДС;",СтатусСообщения.Информация);
	Сообщить("№4 - СубконтоДоходовБУ1;",СтатусСообщения.Информация);
	Сообщить("№5 - СубконтоДоходовБУ2;",СтатусСообщения.Информация);
	Сообщить("№6 - СубконтоДоходовБУ3;",СтатусСообщения.Информация);
	Сообщить("№7 - СубконтоДоходовНУ1;",СтатусСообщения.Информация);
	Сообщить("№8 - СубконтоСписанияСебестоимостиБУ2;",СтатусСообщения.Информация);
	Сообщить("№9 - СубконтоСписанияСебестоимостиБУ3;",СтатусСообщения.Информация);
	Сообщить("№10 - СубконтоСписанияСебестоимостиНУ2;",СтатусСообщения.Информация);
	Сообщить("Для того чтобы еще добавить автомотическое заполнение по определенным реквизитам - Обратитесь к 1С Программисту!",СтатусСообщения.Внимание);
		
КонецПроцедуры

//Процедуры позволяют делать Проведение документа (Возврат товара от покупателя) Без учета было реализованого товара (меньше чем возвращается) по БУ и НУ
Процедура dm_ПроведениеДокументаВозвратТовараОтПокупателя_БезУчетаБылоРеализованогоТовараМеньшеЧемВозвращаетсяБУ(Номенклатура,ДокументОтгрузки,ТаблицаДанных,ЭтотОбъект) Экспорт
	
	Если ЭтотОбъект.dm_БезУчетаБылоРеализованогоТовараМеньшеЧемВозвращается = Истина Тогда
		
	Если ТаблицаДанных.Количество() = 0 Тогда
		
	ТаблицаПоиска = Новый ТаблицаЗначений; 
	ТаблицаПоиска.Колонки.Добавить("Номенклатура");
    ТаблицаПоиска.Колонки.Добавить("Количество");
	
    Для каждого Стр Из ДокументОтгрузки.Товары Цикл
	
	Поиск_Стр = ТаблицаПоиска.Добавить();
    Поиск_Стр.Номенклатура = Стр.Номенклатура;
    Поиск_Стр.Количество = Стр.Количество; 	
	
	КонецЦикла;	
	
	ТаблицаПоиска.Свернуть("Номенклатура","Количество");
	
	Отбор = Новый Структура;
    Отбор.Вставить("Номенклатура", Номенклатура.Номенклатура);
    Строки = ТаблицаПоиска.НайтиСтроки(Отбор);
	
	Если Строки.Количество() <> 0 Тогда
	Обход_ТаблицаДанных = Новый ТаблицаЗначений;
  
    Обход_ТаблицаДанных.Колонки.Добавить("Партия");
    Обход_ТаблицаДанных.Колонки.Добавить("Количество");
    Обход_ТаблицаДанных.Колонки.Добавить("Сумма");
 
    Обход_Стр = Обход_ТаблицаДанных.Добавить();
    Обход_Стр.Партия = Null;
    Обход_Стр.Количество = Строки[0].Количество; 
    Обход_Стр.Сумма = 0;
	
	ТаблицаДанных = Обход_ТаблицаДанных;
Иначе
	Сообщить("В документе: "+ДокументОтгрузки+" нет номенклатуры: "+Номенклатура+" код: "+Номенклатура.Код+" Проверте документ основания!",СтатусСообщения.Важное);
	КонецЕсли;
	КонецЕсли;

    КонецЕсли;

КонецПроцедуры

Процедура dm_ПроведениеДокументаВозвратТовараОтПокупателя_БезУчетаБылоРеализованогоТовараМеньшеЧемВозвращаетсяНУ(Номенклатура,ДокументОтгрузки,ТаблицаДанных,ЭтотОбъект,Результат,КоличествоНеПодобраноПартии) Экспорт
	
	Если ЭтотОбъект.dm_БезУчетаБылоРеализованогоТовараМеньшеЧемВозвращается = Истина Тогда
		
	Если Не Результат.Пустой() Тогда
	Иначе	
	ТаблицаПоиска = Новый ТаблицаЗначений; 
	ТаблицаПоиска.Колонки.Добавить("Номенклатура");
    ТаблицаПоиска.Колонки.Добавить("Количество");
	
    Для каждого Стр Из ДокументОтгрузки.Товары Цикл
	
	Поиск_Стр = ТаблицаПоиска.Добавить();
    Поиск_Стр.Номенклатура = Стр.Номенклатура;
    Поиск_Стр.Количество = Стр.Количество; 	
	
	КонецЦикла;	
	
	ТаблицаПоиска.Свернуть("Номенклатура","Количество");
	
	Отбор = Новый Структура;
    Отбор.Вставить("Номенклатура", Номенклатура);
    Строки = ТаблицаПоиска.НайтиСтроки(Отбор);
	
	Если Строки.Количество() <> 0 Тогда
	Обход_ТаблицаДанных = Новый ТаблицаЗначений;
  
    Обход_ТаблицаДанных.Колонки.Добавить("Партия");
    Обход_ТаблицаДанных.Колонки.Добавить("Количество");
    Обход_ТаблицаДанных.Колонки.Добавить("Сумма");
 
    Обход_Стр = Обход_ТаблицаДанных.Добавить();
    Обход_Стр.Партия = Null;
    Обход_Стр.Количество = Строки[0].Количество; 
    Обход_Стр.Сумма = 0;
	
	ТаблицаДанных = Обход_ТаблицаДанных;
	
	КоличествоНеПодобраноПартии = 0;
	
Иначе
	Сообщить("В документе: "+ДокументОтгрузки+" нет номенклатуры: "+Номенклатура+" код: "+Номенклатура.Код+" Проверте документ основания!",СтатусСообщения.Важное);
	КонецЕсли;
	КонецЕсли;

    КонецЕсли;

КонецПроцедуры

Процедура dm_ПроведениеДокументаВозвратТовараОтПокупателя_БезУчетаБылоРеализованогоТовараМеньшеЧемВозвращается_Отмена_Отказ(Отказ,ЭтотОбъект,КоличествоНеПодобраноПартии) Экспорт
	
	Если ЭтотОбъект.dm_БезУчетаБылоРеализованогоТовараМеньшеЧемВозвращается = Истина Тогда
	Отказ = Ложь;
	Если КоличествоНеПодобраноПартии = 0 Тогда
	КоличествоНеПодобраноПартии = -1;
	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Объщий модуль [УчетТоваров]
Функция dm_ПодготовитьТаблицуВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты, Отказ, ВыводитьСообщения = Истина, ЭтоСторно = Ложь) Экспорт

	Параметры = dm_ПодготовитьПараметрыТаблицыВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты);
	Если Параметры.Реквизиты.Количество() = 0
		ИЛИ Параметры.ТаблицаТовары.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаРезультата = УчетТоваров.ПолучитьПустуюТаблицуСписанныеТовары();
	
	Если НЕ Реквизиты.УказанДокументОтгрузки Тогда
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаРезультата);
		ТаблицаРезультата.ЗаполнитьЗначения(Истина,                              "ОтражатьВБухгалтерскомУчете");
		ТаблицаРезультата.ЗаполнитьЗначения(Реквизиты.НеобходимостьОтраженияВНУ, "ОтражатьВНалоговомУчете");
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	СтруктураСчетовДляЗапроса = dm_РазделитьСчетаУчетаПоПартионномуУчету(Параметры.СчетаУчетаТоваровБУ);
	
	ТекстЗапросаПартионные = "";
	ТекстЗапросаНеПартионные = "";
	ТекстЗапросаНалоговые = "";
	Если СтруктураСчетовДляЗапроса.СчетаПартионные.Количество() > 0 Тогда
		ТекстЗапросаПартионные =
		"ВЫБРАТЬ
		|	""БУ"" КАК Учет,
		|	ОборотыДтКт.СубконтоКт1 КАК Номенклатура,
		|	ОборотыДтКт.СубконтоКт2 КАК Партия,
		|	ОборотыДтКт.СчетКт КАК СчетУчета,
		|	СУММА(ОборотыДтКт.СуммаОборот) КАК Сумма,
		|	СУММА(0) КАК СуммаНУ,
		|	СУММА(0) КАК СуммаВР,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК Количество,
		|	ЕСТЬNULL(СпособыОценкиЗапасовБУ.СпособОценки, ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ФИФО)) КАК СпособОценкиЗапасовБУ,
		|	ОборотыДтКт.СубконтоКт2.Дата КАК ПолеСортировки
		|ПОМЕСТИТЬ ВТ_СписанныеТовары
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ОборотыДтКт(, &КонДата, Регистратор, , , СчетКт В (&СчетКтПартионный), &ВидыСубконтоПартий, СубконтоКт1 В (&Товары)) КАК ОборотыДтКт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособОценкиЗапасовБУ КАК СпособыОценкиЗапасовБУ
		|		ПО ОборотыДтКт.СчетКт = СпособыОценкиЗапасовБУ.СчетЗапасов
		|ГДЕ
		|	(ОборотыДтКт.КоличествоОборотКт >= 0
		|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
		|				И ОборотыДтКт.КоличествоОборотКт <= 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыДтКт.СчетКт,
		|	ОборотыДтКт.СубконтоКт1,
		|	ОборотыДтКт.СубконтоКт2,
		|	ЕСТЬNULL(СпособыОценкиЗапасовБУ.СпособОценки, ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ФИФО)),
		|	ОборотыДтКт.СубконтоКт2.Дата";

	КонецЕсли;

	Если СтруктураСчетовДляЗапроса.СчетаНеПартионные.Количество() > 0 Тогда
		ТекстЗапросаНеПартионные =
		"ВЫБРАТЬ
		|	""БУ"" КАК Учет,
		|	ОборотыДтКт.СубконтоКт1 КАК Номенклатура,
		|	NULL КАК Партия,
		|	ОборотыДтКт.СчетКт КАК СчетУчета,
		|	СУММА(ОборотыДтКт.СуммаОборот) КАК Сумма,
		|	СУММА(0) КАК СуммаНУ,
		|	СУММА(0) КАК СуммаВР,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней) КАК СпособОценкиЗапасовБУ,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК ПолеСортировки
		|ПОМЕСТИТЬ ВТ_СписанныеТовары
		|ИЗ
		|	РегистрБухгалтерии.Типовой.ОборотыДтКт(, &КонДата, Регистратор, , , СчетКт В (&СчетКтНеПартионный), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура), СубконтоКт1 В (&Товары)) КАК ОборотыДтКт
		|ГДЕ
		|	(ОборотыДтКт.КоличествоОборотКт >= 0
		|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
		|				И ОборотыДтКт.КоличествоОборотКт <= 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыДтКт.СчетКт,
		|	ОборотыДтКт.СубконтоКт1";
		
	КонецЕсли;
	
	Если Реквизиты.НеобходимостьОтраженияВНУ И Параметры.СчетаУчетаТоваровНУ.Количество() > 0 Тогда
		ТекстЗапросаНалоговые =
		"ВЫБРАТЬ
		|	""НУ"" КАК Учет,
		|	ОборотыДтКт.СубконтоКт1 КАК Номенклатура,
		|	NULL КАК Партия,
		|	ОборотыДтКт.СчетКт КАК СчетУчета,
		|	СУММА(0) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА ОборотыДтКт.ВидУчетаКт = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.НУ)
		|					ИЛИ ОборотыДтКт.ВидУчетаКт <> ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР)
		|				ТОГДА ОборотыДтКт.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНУ,
		|	СУММА(ВЫБОР
		|			КОГДА ОборотыДтКт.ВидУчетаКт = ЗНАЧЕНИЕ(Справочник.ВидыУчетаНУ.ВР)
		|				ТОГДА ОборотыДтКт.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВР,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОценки.ПоСредней) КАК СпособОценкиЗапасовБУ,
		|	СУММА(ОборотыДтКт.КоличествоОборотКт) КАК ПолеСортировки
		|ИЗ
		|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(, &КонДата, Регистратор, , , СчетКт В (&СчетКтНУ), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура), СубконтоКт1 В (&Товары)) КАК ОборотыДтКт
		|ГДЕ
		|	(ОборотыДтКт.КоличествоОборотКт >= 0
		|			ИЛИ ОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
		|				И ОборотыДтКт.Регистратор <> &ЭтотВозврат
		|				И ОборотыДтКт.КоличествоОборотКт <= 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыДтКт.СчетКт,
		|	ОборотыДтКт.СубконтоКт1";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапросаПартионные)
		 И ПустаяСтрока(ТекстЗапросаНеПартионные) Тогда
		
		ОбщегоНазначенияБКВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаТовары, ТаблицаРезультата);
		Возврат ТаблицаРезультата;
	
	ИначеЕсли НЕ ПустаяСтрока(ТекстЗапросаПартионные)
			  И ПустаяСтрока(ТекстЗапросаНеПартионные) Тогда
		
		ТекстЗапроса = ТекстЗапросаПартионные;
		
	ИначеЕсли ПустаяСтрока(ТекстЗапросаПартионные)
			  И НЕ ПустаяСтрока(ТекстЗапросаНеПартионные) Тогда
		ТекстЗапроса = ТекстЗапросаНеПартионные;
		
	Иначе
		
		ТекстЗапроса = ТекстЗапросаПартионные + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + СтрЗаменить(ТекстЗапросаНеПартионные, "ПОМЕСТИТЬ ВТ_СписанныеТовары", "");
		
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстЗапросаНалоговые) Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстЗапросаНалоговые;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|;
		|
		|ВЫБРАТЬ
		|	ВТ_СписанныеТовары.Учет,
		|	ВТ_СписанныеТовары.Номенклатура,
		|	ВТ_СписанныеТовары.Партия,
		|	ВТ_СписанныеТовары.СчетУчета,
		|	ВТ_СписанныеТовары.СпособОценкиЗапасовБУ,
		|	ВТ_СписанныеТовары.ПолеСортировки,
		|	СУММА(ВТ_СписанныеТовары.Сумма) КАК Сумма,
		|	СУММА(ВТ_СписанныеТовары.СуммаНУ) КАК СуммаНУ,
		|	СУММА(ВТ_СписанныеТовары.СуммаВР) КАК СуммаВР,
		|	СУММА(ВТ_СписанныеТовары.Количество) КАК Количество
		|ИЗ
		|	ВТ_СписанныеТовары КАК ВТ_СписанныеТовары
		|
		|СГРУППИРОВАТЬ ПО
		|	Учет,
		|	Номенклатура,
		|	СчетУчета,
		|	Партия,
		|	СпособОценкиЗапасовБУ,
		|	ПолеСортировки
		|		
		|УПОРЯДОЧИТЬ ПО
		|	Учет,
		|	Номенклатура,
		|	Количество УБЫВ
		|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор",        Реквизиты.ДокументОтгрузки);
	Запрос.УстановитьПараметр("СчетКтПартионный",   СтруктураСчетовДляЗапроса.СчетаПартионные);
	Запрос.УстановитьПараметр("СчетКтНеПартионный", СтруктураСчетовДляЗапроса.СчетаНеПартионные);
	Запрос.УстановитьПараметр("СчетКтНУ", 			Параметры.СчетаУчетаТоваровНУ.ВыгрузитьКолонку("СчетУчетаНУ"));
	Запрос.УстановитьПараметр("КонДата",            Реквизиты.Период);
	Запрос.УстановитьПараметр("Товары",             Параметры.СписокНоменклатуры.ВыгрузитьКолонку("Номенклатура"));

	МассивВидовСубконто = Новый Массив;
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Номенклатура);
	МассивВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоТиповые.Партии);
	Запрос.УстановитьПараметр("ВидыСубконтоПартий", МассивВидовСубконто);
	Запрос.УстановитьПараметр("ЭтотВозврат", Реквизиты.Регистратор);

	ТаблицаОтгрузок = Запрос.Выполнить().Выгрузить();

	// Если не ведется учет ВР балансовым методом, то предварительно обработаем таблицу отгрузок
	Если НЕ Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом Тогда 
		
		ОтгруженныеПартииБУ = ТаблицаОтгрузок.Скопировать(Новый Структура("Учет", "БУ"));
		ОтгруженныеПартииБУ.Свернуть("Номенклатура, СчетУчета", "Сумма");
		
		Для Каждого СтрокаВозврата Из Параметры.ТаблицаТовары Цикл
			ОтгруженныеПартииНУ = ТаблицаОтгрузок.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаВозврата.Номенклатура, СтрокаВозврата.СчетУчетаНУ));
			СтрокиОтгрузкиБУ = ОтгруженныеПартииБУ.НайтиСтроки(Новый Структура("Номенклатура, СчетУчета", СтрокаВозврата.Номенклатура, СтрокаВозврата.СчетУчетаБУ));
			СуммаСписанияБУ = 0;
			
			Для Каждого СтрокаОтгрузкиБУ Из СтрокиОтгрузкиБУ Цикл
				СуммаСписанияБУ = СуммаСписанияБУ + СтрокаОтгрузкиБУ.Сумма;
			КонецЦикла;
			
			Для Каждого СтрокаОтгрузкиНУ Из ОтгруженныеПартииНУ Цикл
				СтрокаОтгрузкиНУ.СуммаНУ = СуммаСписанияБУ;
				СтрокаОтгрузкиНУ.СуммаВР = 0;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВидыУчета = Новый Структура("БУ, НУ", НСтр("ru='Бух.учет. '"), НСтр("ru='Нал.учет. '"));
	Для Каждого СтрокаВозврата Из Параметры.ТаблицаТовары Цикл

		Для Каждого Учет Из СтруктураВидыУчета Цикл
			
			Если Учет.Ключ = "НУ" И НЕ Реквизиты.НеобходимостьОтраженияВНУ Тогда 
				Продолжить;
			КонецЕсли;
			
			КоличествоНеПодобраноПартии = СтрокаВозврата.Количество;
			
			ОтгруженныеПартии = ТаблицаОтгрузок.Скопировать(Новый Структура("Учет, Номенклатура, СчетУчета", Учет.Ключ, СтрокаВозврата.Номенклатура, СтрокаВозврата["СчетУчета" + Учет.Ключ]));
			Если ОтгруженныеПартии.Количество() > 0 Тогда 
				СтрокаОтгрузки = ОтгруженныеПартии[0];
				СтрокаНаправлениеСортировки = " УБЫВ";
				Если СтрокаОтгрузки.СпособОценкиЗапасовБУ = Перечисления.СпособыОценки.ФИФО Тогда 
					СтрокаНаправлениеСортировки = " ВОЗР";
				КонецЕсли;
				ОтгруженныеПартии.Сортировать("ПолеСортировки" + СтрокаНаправлениеСортировки);
			КонецЕсли;
			
			Для каждого СтрокаОтгрузки Из ОтгруженныеПартии Цикл

				Если СтрокаОтгрузки.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаРезультата.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВозврата);
				НоваяСтрока.Партия = СтрокаОтгрузки.Партия;
				
				Если Учет.Ключ = "БУ" Тогда 
					НоваяСтрока.ОтражатьВБухгалтерскомУчете = Истина;
				Иначе 
					НоваяСтрока.ОтражатьВНалоговомУчете = Истина;
				КонецЕсли;
				
				Если КоличествоНеПодобраноПартии > СтрокаОтгрузки.Количество Тогда
					НоваяСтрока.Количество         = СтрокаОтгрузки.Количество;
					НоваяСтрока.СуммаСписания      = СтрокаОтгрузки.Сумма;
					НоваяСтрока.СуммаСписанияНУ    = СтрокаОтгрузки.СуммаНУ;
					НоваяСтрока.СуммаСписанияВР    = СтрокаОтгрузки.СуммаВР;
					КоличествоНеПодобраноПартии    = КоличествоНеПодобраноПартии - СтрокаОтгрузки.Количество;
				Иначе
					НоваяСтрока.Количество         = КоличествоНеПодобраноПартии;
					Коэфф                          = КоличествоНеПодобраноПартии / СтрокаОтгрузки.Количество;
					НоваяСтрока.СуммаСписания      = Окр(СтрокаОтгрузки.Сумма   * Коэфф, 2);
					НоваяСтрока.СуммаСписанияНУ    = Окр(СтрокаОтгрузки.СуммаНУ * Коэфф, 2);
					НоваяСтрока.СуммаСписанияВР    = Окр(СтрокаОтгрузки.СуммаВР * Коэфф, 2);
					КоличествоНеПодобраноПартии    = 0;
				КонецЕсли;
				
				НоваяСтрока.ВалютаВзаиморасчетов = Реквизиты.ВалютаВзаиморасчетов;
				
				Если Реквизиты.ВалютаВзаиморасчетов = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда 
					НоваяСтрока.СуммаСписанияВал = НоваяСтрока.СуммаСписания;
				Иначе 
					НоваяСтрока.СуммаСписанияВал = ?(СтрокаВозврата.Сумма = 0, НоваяСтрока.СуммаСписания, НоваяСтрока.СуммаСписания * СтрокаВозврата.СуммаВал / СтрокаВозврата.Сумма);
				КонецЕсли;
				
				СтрокаОтгрузки.Количество 	= СтрокаОтгрузки.Количество - НоваяСтрока.Количество;
				СтрокаОтгрузки.Сумма 		= СтрокаОтгрузки.Сумма - НоваяСтрока.СуммаСписания;
				СтрокаОтгрузки.СуммаНУ 		= СтрокаОтгрузки.СуммаНУ - НоваяСтрока.СуммаСписанияНУ;
				СтрокаОтгрузки.СуммаВР 		= СтрокаОтгрузки.СуммаВР - НоваяСтрока.СуммаСписанияВР;

				Если КоличествоНеПодобраноПартии = 0 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;

			// Если в документе указан документ реализации по которому было отгружено больше,
			// чем возвращается, то эту разницу отнесем на пустую партию.
			Если КоличествоНеПодобраноПартии > 0 И ВыводитьСообщения
				И (Учет.Ключ = "БУ" ИЛИ Учет.Ключ = "НУ" И Реквизиты.ВедениеУчетаВременныхРазницБалансовымМетодом) Тогда
				
				ТекстСообщения = НСтр("ru = '%1Документом ""%2"" было реализовано ""%3"" на ""%4"" ед. меньше, чем возвращается.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					Учет.Значение,
					СокрЛП(Реквизиты.ДокументОтгрузки),
					СтрокаВозврата.Номенклатура,
					КоличествоНеПодобраноПартии);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Реквизиты.Регистратор,
					"Товары[" + Формат(СтрокаВозврата.НомерСтроки - 1, "ЧН=0; ЧГ=")+"].Количество",
					"Объект",
					Отказ);
					
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;

	Возврат ТаблицаРезультата;

КонецФункции

//Объщий модуль [УчетТоваров]
Функция dm_ПодготовитьПараметрыТаблицыВозвращенныеСписанныеТовары(ТаблицаТовары, ТаблицаСчетаУчетаТоваров, ТаблицаСписокНоменклатуры, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаТовары

	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"        // <Строка,0> - имя списка в документе
	+ "СинонимСписка,"    // <Строка,0> - синоним списка
	+ "Период,"           // <Дата> - дата списания
	+ "НомерСтроки,"      // <Число> - номер строки в списке
	+ "СчетУчетаБУ,"      // <ПланСчетовСсылка.Типовой> - счет учета, с которого списывается номенклатура
	+ "СчетУчетаНУ,"      // <ПланСчетовСсылка.Налоговый> - счет учета, с которого списывается номенклатура
	+ "Номенклатура,"     // <СправочникСсылка.Номенклатура> - списываемая номенклатура
	+ "Склад,"            // <СправочникСсылка.Склад> - склад, с которого списывается номенклатура
	+ "Партия," // <ДокументСсылка.*> - документ поступления номенклатуры (партия)
	+ "Себестоимость,"    // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания
	+ "Сумма,"            // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания пересчитанная в валюту регл. учета
	+ "СуммаВал,"         // <Число,15,2> - сумма списываемой номенклатуры, указанная в документе списания пересчитанная в валюту взаиморасчетов
	+ "Количество,"       // <Число,15,3> - количество списываемой номенклатуры
	+ "КорСчетСписанияБУ,"// <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ1,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ2,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоБУ3,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ1,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ2,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоБУ3,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСчетСписанияНУ,"// <ПланСчетовСсылка.Типовой> - счет учета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ1,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ2,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "ВидКорСубконтоНУ3,"// <Число/Строка/ПланВидовХарактеристикСсылка.ВидыСубконтоТиповые> - вид субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ1,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ2,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСубконтоНУ3,"   // - значение субконто счета, на который списывается номенклатура
	+ "КорСтруктурноеПодразделение," // <Ссылка на справочник подразделений> - подразделение, в которое списывается номенклатура
	+ "СтруктурноеПодразделение,"    // <Ссылка на справочник подразделений> - подразделение, из которого списывается номенклатура
	+ "ВалютаВзаиморасчетов,"   // <СправочникСсылка.Валюты>
	+ "СуммаСписания,"    // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков
	+ "СуммаСписанияНУ,"  // <Число,15,2> - сумма списываемой номенклатуры (НУ), определенная по данным остатков
	+ "СуммаСписанияПР,"  // <Число,15,2> - сумма постоянных разниц в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВР,"  // <Число,15,2> - сумма временных разниц в стоимости списываемой номенклатуры, определенной по данным остатков
	+ "СуммаСписанияВал"; // <Число,15,2> - сумма списываемой номенклатуры, определенная по данным остатков в валюте взаиморасчетов

	Параметры.Вставить("ТаблицаТовары",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаТовары, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "СчетУчетаБУ";      // <ПланСчетовСсылка.Типовой> - счет учета товаров в БУ
	
	Параметры.Вставить("СчетаУчетаТоваровБУ",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетаУчетаТоваров, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "СчетУчетаНУ";      // <ПланСчетовСсылка.Налоговый> - счет учета товаров в НУ
	
	Параметры.Вставить("СчетаУчетаТоваровНУ",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСчетаУчетаТоваров, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
	+ "Номенклатура";     // <СправочникСсылка.Номенклатура> - ссылка на номенклатуру, по которой будет определяться партия
	
	Параметры.Вставить("СписокНоменклатуры",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписокНоменклатуры, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - период движений - дата документа
	+ "Регистратор,"            // <ДокументСсылка>
	+ "Организация,"            // <СправочникСсылка.Организации>
	+ "НеобходимостьОтраженияВНУ," // <Булево> - признак необходимости формирования проводок по налоговому учету
	+ "УказанДокументОтгрузки," // <Булево>
	+ "ДокументОтгрузки,"       // <ДокументСсылка>
	+ "ВалютаВзаиморасчетов,"   // <СправочникСсылка.Валюты>
	+ "ВедениеУчетаВременныхРазницБалансовымМетодом"; // <Булево>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБКВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

//Объщий модуль [УчетТоваров]
Функция dm_РазделитьСчетаУчетаПоПартионномуУчету(ТаблицаСчетаУчетаТоваров)

	СтруктураСчетов = Новый Структура;
	СтруктураСчетов.Вставить("СчетаПартионные",   Новый Массив);
	СтруктураСчетов.Вставить("СчетаНеПартионные", Новый Массив);

	Для каждого СтрокаСчета Из ТаблицаСчетаУчетаТоваров Цикл
		Если ПроцедурыБухгалтерскогоУчетаВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СтрокаСчета.СчетУчетаБУ) Тогда
			СтруктураСчетов.СчетаПартионные.Добавить(СтрокаСчета.СчетУчетаБУ);
		Иначе
			СтруктураСчетов.СчетаНеПартионные.Добавить(СтрокаСчета.СчетУчетаБУ);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураСчетов;

КонецФункции
//********************************************************************************************************************************************************


//Процедура позволяет создавать проводки в документе РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС 
//Регистрация прочих операций по реализованным товарам (работам, услугам) в целях НДС
//Формирует проводки по счету 6010 и 1210

Процедура dm_ДвиженияПоРегистрамРегл_РегистрацияПрочихОперацийПоРеализованнымТоварамВЦеляхНДС(СтруктураШапкиДокумента, ТаблицаДокумента,ПроводкиБУ, ПроводкиНУ, Отказ, ЭтотОбъект) Экспорт
	
	Если ПустаяСтрока(ЭтотОбъект.dm_Доходы) = Истина ИЛИ ПустаяСтрока(ЭтотОбъект.dm_НоменклатурныеГруппы) Тогда
		//Режим = РежимДиалогаВопрос.ДаНет;
	    //Текст = "ru = ""Проверьте заполнение Субконто по счету (6030) во вкладке (Дополнительно). Продолжить выполнение операции?""";
	    //Ответ = Вопрос(НСтр(Текст), Режим, 0);
	Сообщение2 = новый СообщениеПользователю;
	Сообщение2.Текст = "Предупреждение: Проверьте заполнение Субконто по счету (6030) во вкладке (Дополнительно). Продолжить выполнение операции?";
	Сообщение2.Сообщить();
	КонецЕсли;
	//Если Ответ = КодВозвратаДиалога.Нет Тогда
	//	Отказ = Истина;
	//	Возврат;
	//Иначе
	Сообщение1 = новый СообщениеПользователю;
	Сообщение1.Текст = "Проводим документ!";
	Сообщение1.Сообщить();
		
	//	Сообщить("Проводим документ!",СтатусСообщения.Информация);
	//КонецЕсли;
	//КонецЕсли;
	
	
	
	ПризнакКорректировки = НЕ ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации;
	
	// Проводки по товарам
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл	
		
		Если СтрокаТаблицы.СуммаНДС = 0 Тогда		
			Продолжить;		
		КонецЕсли; 
		//Если  СтрокаТаблицы.НДС = 0 Тогда
		//	Продолжить;
		//КонецЕсли;	
		Проводка = ПроводкиБУ.Добавить();				
		Проводка.Период      = ЭтотОбъект.Дата;
		Проводка.Организация = ЭтотОбъект.Организация;  
		//Проводка.Сумма       = ?(ПризнакКорректировки, -СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
		Проводка.Сумма       = ?(ПризнакКорректировки, -СтрокаТаблицы.ОборотПоРеализации, СтрокаТаблицы.ОборотПоРеализации);
		Проводка.Содержание  = "НДС: " + СокрЛП(ЭтотОбъект.Комментарий);
		
		ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(
				Проводка, ЭтотОбъект.СтруктурноеПодразделение, ЭтотОбъект.СтруктурноеПодразделение);
	 	
		Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации Тогда
			// Оборот по реализации
			Проводка.СчетДт      = ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        ЭтотОбъект.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           ЭтотОбъект.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", ЭтотОбъект);
			
			Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				//Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
				Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ОборотПоРеализацииВал;

			КонецЕсли;
			
			Проводка.СчетКт = ПланыСчетов.Типовой.НайтиПоКоду("6030");
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Доходы", 	ЭтотОбъект.dm_Доходы);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"НоменклатурныеГруппы", ЭтотОбъект.dm_НоменклатурныеГруппы);
			
		Иначе
			// Корректировка оборота по реализации
			Проводка.СчетКт      = ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом;
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        ЭтотОбъект.Контрагент);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           ЭтотОбъект.ДоговорКонтрагента);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", ЭтотОбъект);
			
			Если ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				
				//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
				Проводка.ВалютаКт        = ЭтотОбъект.ВалютаДокумента;//ЭтотОбъект.ВалютаВзаиморасчетов;
				//Проводка.ВалютнаяСуммаКт = ?(ПризнакКорректировки, -СтрокаТаблицы.НДСВал, СтрокаТаблицы.НДСВал);
				Проводка.ВалютнаяСуммаКт = ?(ПризнакКорректировки, -СтрокаТаблицы.ОборотПоРеализацииВал, СтрокаТаблицы.ОборотПоРеализацииВал);

			КонецЕсли;
			
			Проводка.СчетДт = ПланыСчетов.Типовой.НайтиПоКоду("6030");
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Доходы", 	ЭтотОбъект.dm_Доходы);
			ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", ЭтотОбъект.dm_НоменклатурныеГруппы);
			КонецЕсли;	
		
		//формирование проводок по НУ
		Если ЭтотОбъект.ВидУчетаНУ = Справочники.ВидыУчетаНУ.НУ Тогда
			ПроводкаНУ = ПроводкиНУ.Добавить();				
			ПроводкаНУ.Период      = ЭтотОбъект.Дата;
			ПроводкаНУ.Организация = ЭтотОбъект.Организация;   
			//ПроводкаНУ.Сумма       = ?(ПризнакКорректировки, -СтрокаТаблицы.НДС, СтрокаТаблицы.НДС);
			ПроводкаНУ.Сумма       = ?(ПризнакКорректировки, -СтрокаТаблицы.ОборотПоРеализации, СтрокаТаблицы.ОборотПоРеализации);
			ПроводкаНУ.Содержание  = "НДС: " + СокрЛП(ЭтотОбъект.Комментарий);
			
			ПроцедурыБухгалтерскогоУчета.УстановитьПодразделенияПроводки(ПроводкаНУ, ЭтотОбъект.СтруктурноеПодразделение, ЭтотОбъект.СтруктурноеПодразделение);			
			
			СчетУчетаРасчетовСКонтрагентомНУ = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьСчетРасчетовСКонтрагентомНУ(ЭтотОбъект.СчетУчетаРасчетовСКонтрагентом);
			Если ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийВЦеляхНДС.РегистрацияОборотаПоРеализации Тогда
				// Оборот по реализации				
			
				ПроводкаНУ.СчетДт       = СчетУчетаРасчетовСКонтрагентомНУ;			
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Контрагенты",        ЭтотОбъект.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Договоры",           ЭтотОбъект.ДоговорКонтрагента);
							
				ПроводкаНУ.СчетКт = ПланыСчетов.Типовой.НайтиПоКоду("6030").СчетНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Доходы", 	ЭтотОбъект.dm_Доходы);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Номенклатура", СтрокаТаблицы.Номенклатура);
				
			Иначе
				// Корректировка оборота по реализации
				ПроводкаНУ.СчетКт       = СчетУчетаРасчетовСКонтрагентомНУ;
				
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Контрагенты",        ЭтотОбъект.Контрагент);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетКт,ПроводкаНУ.СубконтоКт,"Договоры",           ЭтотОбъект.ДоговорКонтрагента);
								            								
				ПроводкаНУ.СчетДт = ПланыСчетов.Типовой.НайтиПоКоду("6030").СчетНУ;
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Доходы", 	ЭтотОбъект.dm_Доходы);
				ПроцедурыБухгалтерскогоУчета.УстановитьСубконто(ПроводкаНУ.СчетДт,ПроводкаНУ.СубконтоДт,"Номенклатура", СтрокаТаблицы.ТМЗ);				
			КонецЕсли;
			
			ПроцедурыНалоговогоУчета.ВидУчетаНУ(ПроводкаНУ, ЭтотОбъект.ВидУчетаНУ);
		КонецЕсли; 		
	КонецЦикла;		
	
	

КонецПроцедуры // ДвиженияПоРегистрамРегл 






Процедура dm_МинусИлиПлюс(ТаблицаДокумента,ЭтотОбъект)Экспорт
	
	Для каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		
		Если ЭтотОбъект.dm_МинусИлиПлюс = Истина Тогда
		СтрокаТаблицы.Цена = ?(СтрокаТаблицы.Цена > 0, -СтрокаТаблицы.Цена, СтрокаТаблицы.Цена);
	    Иначе
		СтрокаТаблицы.Цена = ?(СтрокаТаблицы.Цена < 0, -СтрокаТаблицы.Цена, СтрокаТаблицы.Цена);
		КонецЕсли;
	
		// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти = СтрокаТаблицы;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	УчетНДСИАкциза.РассчитатьОборотПоРеализацииТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
    КонецЦикла;


КонецПроцедуры

